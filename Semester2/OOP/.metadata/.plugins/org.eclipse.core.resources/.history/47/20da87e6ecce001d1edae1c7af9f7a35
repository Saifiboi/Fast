#include <iostream>
#include"Matrix.cpp"
using namespace std;

int main() {
	char input;
	cout<<"\nWelcome to Matrix Portal:::\n";
	cout<<"\nWanna create matrix::'y' for yes 'n' for no::";
	cin>>input;
	while((input!='n' && input!='N')&&(input!='Y' && input!='y'))
	{
		cout<<"Invalid character :Enter valid one:";
		cin>>input;
	}
	if(input=='y'||input=='Y')
	{
		int rows,cols,choice;
		cout<<"\nEnter the Rows of matrix:";
		cin>>rows;

		while(rows<0)
		{
			cout<<"\nInvalid Input!Rows can't be negative:Try Again:";
			cin>>rows;
		}
		cout<<"\nEnter the Columns of matrix:";
		cin>>cols;
		while(cols<0)
		{
			cout<<"\nInvalid Input!Columns can't be negative:Try Again:";
			cin>>cols;
		}
		int c;//input choice in switch.
		Matrix M(rows,cols);
		Matrix M1(rows,cols);
		Matrix M2(rows,cols);
		char loop;//input for loop
		char set;//input to check if set values or not?
		do{
				cout<<"\n\nFunction Menu:::\n";
				cout<<"1.set values\n";
				cout<<"2.Display Matrix\n";
				cout<<"3.setColumns\n";
				cout<<"4.setRows\n";
				cout<<"5.set size\n";
				cout<<"6.get columns\n";
				cout<<"7.get rows\n";
				cout<<"8.use = operator\n";
				cout<<"9.use == operator\n";
				cout<<"10.Use + operator\n";
				cout<<"11.Use - operator\n";
				cout<<"12.Use * operator\n";
				cout<<"13.Use ++ operator\n";
				cout<<"\nEnter your choice::";
				cin>>choice;
				while(choice<1 || choice>13)
				{
					cout<<"\nInvalid Choice!Try Again:";
					cin>>choice;
				}
				switch(choice)
				{
					case 1:
						M.setvalues();
						break;
					case 2:
						M.Display();
						break;
					case 3:
						cout<<"\nEnter Number Of columns:";
						cin>>cols;
						while(cols<0)
						{
							cout<<"\nInvalid Input!Columns can't be negative:Try Again:";
							cin>>cols;
						}
						M.setColumns(cols);
						cout<<"\nDo you want to set values for it !otherwise garbage!Enter 'y' for yes 'n' for no::";
						cin>>set;
						while((set!='n' && set!='N')&&(set!='Y' && set!='y'))
						{
							cout<<"Invalid character :Enter valid one:";
							cin>>set;
						}
						if(set=='y' || set=='Y')
						{
							M.setvalues();
						}
						break;
					case 4:
						cout<<"\nEnter Number Of Rows:";
						cin>>rows;
						while(rows<0)
						{
							cout<<"\nInvalid Input!Rows can't be negative:Try Again:";
							cin>>rows;
						}
						M.setRows(rows);
						cout<<"\nDo you want to set values for it !otherwise garbage!Enter 'y' for yes 'n' for no::";
						cin>>set;
						while((set!='n' && set!='N')&&(set!='Y' && set!='y'))
						{
							cout<<"Invalid character :Enter valid one:";
							cin>>set;
						}
						if(set=='y' || set=='Y')
						{
							M.setvalues();
						}
						break;
					case 5:
						cout<<"\nEnter the Rows of matrix:";
						cin>>rows;
						while(rows<0)
						{
							cout<<"\nInvalid Input!Rows can't be negative:Try Again:";
							cin>>rows;
						}
						cout<<"\nEnter the Columns of matrix:";
						cin>>cols;
						while(cols<0)
						{
							cout<<"\nInvalid Input!Columns can't be negative:Try Again:";
							cin>>cols;
						}
						M.setsize(rows, cols);
						cout<<"\nDo you want to set values for it !otherwise garbage!Enter 'y' for yes 'n' for no::";
						cin>>set;
						while((set!='n' && set!='N')&&(set!='Y' && set!='y'))
						{
							cout<<"Invalid character :Enter valid one:";
							cin>>set;
						}
						if(set=='y' || set=='Y')
						{
							M.setvalues();
						}
						break;
					case 6:
						cout<<"\nThe columns::"<<M.getColumns()<<endl;
						break;
					case 7:
						cout<<"\nThe Rows::"<<M.getRows()<<endl;
						break;
					case 8:
						cout<<"\nEnter the Dummy Rows of new  matrix:";
						cin>>rows;

						while(rows<0)
						{
							cout<<"\nInvalid Input!Rows can't be negative:Try Again:";
							cin>>rows;
						}
						cout<<"\nEnter the Dummy Columns of new matrix:";
						cin>>cols;
						while(cols<0)
						{
							cout<<"\nInvalid Input!Columns can't be negative:Try Again:";
							cin>>cols;
						}
						M1.setsize(rows, cols);
						M1=M;
						cout<<"M1=M::\n";
						M1.Display();
						break;
					case 9:
						cout<<"\nEnter the Rows of new matrix:";
						cin>>rows;

						while(rows<0)
						{
								cout<<"\nInvalid Input!Rows can't be negative:Try Again:";
								cin>>rows;
						}
						cout<<"\nEnter the Columns of new matrix:";
						cin>>cols;
						while(cols<0)
						{
							cout<<"\nInvalid Input!Columns can't be negative:Try Again:";
							cin>>cols;
						}
						M1.setsize(rows, cols);
						M1.setvalues();
						cout<<"\nThe Result:"<<(M1==M)<<endl;
						break;
					case 10:
						cout<<"\nEnter the Rows of new matrix:";
						cin>>rows;
						while(rows<0)
						{
								cout<<"\nInvalid Input!Rows can't be negative:Try Again:";
								cin>>rows;
						}
						cout<<"\nEnter the Columns of new matrix:";
						cin>>cols;
						while(cols<0)
						{
							cout<<"\nInvalid Input!Columns can't be negative:Try Again:";
							cin>>cols;
						}
						M1.setsize(rows, cols);
						M1.setvalues();
						cout<<"\nThe + operator::\n";
						M2=M1+M;
						M2.Display();
						break;
					case 11:
						cout<<"\nEnter the Rows of new matrix:";
						cin>>rows;
						while(rows<0)
						{
								cout<<"\nInvalid Input!Rows can't be negative:Try Again:";
								cin>>rows;
						}
						cout<<"\nEnter the Columns of new matrix:";
						cin>>cols;
						while(cols<0)
						{
							cout<<"\nInvalid Input!Columns can't be negative:Try Again:";
							cin>>cols;
						}
						M1.setsize(rows, cols);
						M1.setvalues();
						cout<<"\nThe - operator::\n";
						M2=M1-M;
						M2.Display();
						break;
					case 12:
						cout<<"\nEnter 1 for scalar multiplication and 2 for MatriX Multiplication::";
						cin>>c;
						while(c<1 || c>2)
						{
							cout<<"\nInvalid Input Try Again:";
							cin>>c;
						}
						int scalar;
						if(c==1)
						{
							cout<<"\nEnter the scalar:";
							cin>>scalar;
							M1.setsize(rows, cols);
							M1=M*scalar;
							cout<<"\nThe result of scalar multiplicatio13n:\n";
							M1.Display();
						}
						else
						{
							cout<<"\nEnter the Rows of new matrix:";
							cin>>rows;
							while(rows<0)
							{
								cout<<"\nInvalid Input!Rows can't be negative:Try Again:";
								cin>>rows;
							}
							cout<<"\nEnter the Columns of new matrix:";
							cin>>cols;
							while(cols<0)
							{
								cout<<"\nInvalid Input!Columns can't be negative:Try Again:";
								cin>>cols;
							}
							M1.setsize(rows, cols);
							M1.setvalues();
							M2=M*M1;
							cout<<"\nThe result of Matrix multiplication is:";
							M2.Display();
						}
						break;
					case 13:
						int c;
						cout<<"\nEnter 1 for prefix addition and 2 for postfix addfition:";
						cin>>c;
						while(c<1 || c>2)
						{
							cout<<"\nInvalid Input Try Again:";
							cin>>c;
						}
						if(c==1)
						{
							cout<<"\nThe Result of prefix increment is:\n";
							M2=++M;
							M2.Display();
							M.Display();
						}
						else
						{
							cout<<"\nThe Result of postfix increment is:\n";
							M2=M++;
							M2.Display();
							M.Display();
						}
				}
				cout<<"Do you want to continue:input 'y' for yes and 'n' for no:";
				cin>>loop;
				while((loop!='n' && loop!='N')&&(loop!='Y' && loop!='y'))
				{
						cout<<"Invalid charcter :Enter valid one:";
						cin>>loop;
				}
			} while(loop=='y' || loop=='Y');
		cout<<"\nProgram Ended!\n";
	}
	else
	{
		cout<<"\nProgram Ended!\n";
	}
}
