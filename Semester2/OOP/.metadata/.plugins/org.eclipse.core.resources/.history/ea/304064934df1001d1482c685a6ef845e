//============================================================================
// Name        : Driver.cpp
// Author      : Saif Ur Rehman
// ROLL NO     :i22-1697
//============================================================================
#include "header.h"
#include "Patient.h"
#include "Doctor.h"
#include "EHR.h"
#include "IOT.h"
//void encryptEHR(EHR &E);		//ecncrypt EHR object.
//void encryptIOT(IOT &);			//Encrypt IOT object.
//void decryptIOT(IOT &);			//decrypt IOT object in accordance to encryption.
//void PatientPortal(Patient *P,Doctor * D);			//App for patient use.
//void DoctorPortal(Patient *P,Doctor * D);			//App for Doctor Use.
//void writepatient(Patient *P,int size);			//Write all patients in patient list file.
//Patient *readpatient();						//read all patient from patient list file.
//void writeDoctor(Doctor *D,int size);		//write all doctors in Doctor list file.
Doctor * readDoctor();						//read all doctors from doctor list file.
//void writeEHR(string,int);					//Write EHR object of Patient and then store using store EHR function..
//void writeIOT(IOT & I,string path);			//Write IOT object in file at specific path.
//void readIOT(IOT & I,string path,bool check);		//read all IOTs and stores last one.
//void callIOTwrite(int index);						//calling function to create specfic path for writing EHR.
//void seeEHRtoD(Patient *P,Doctor &D);				//Performs dispalying EHR  functionality to Doctor of specific patient .
//void assignDoctors(Patient *P,Doctor *D2);			//function that aggregate doctors to patients.
//void EditEHR(Patient *P,Doctor &D);					//Function to allow editing in EHR of patient to doctor according to permission.
//void seeIOTtoD(Patient *P,Doctor &D);				//Function to dispaly current IOT data of patient to dotor.
//void Mngeappointreq(Patient *P,Doctor &D);			//allow doctor to Perform all acceptance of Appointments of Patients.
//void storeEHR(string path,int doc_id,EHR &E);		//Store EHR file at specific path.		//takes a single dummy character.
int main() {
	srand(time(0));			// Seed the random number generator with the current time
	char contin='Y';		// Initialize a variable to store the user's choice to continue.
	Doctor *D2=readDoctor();	// Read in all Doctor objects.
//	Patient P;
//	EHR E;
//		int arr1[4];
//		for(int i=0;i<4;i++)
//		{
//			arr1[i]=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient1/EHR/EHR"+to_string(i+1)+".dat");
//		}
//		Doctor *D10[5];
//		for(int i=0;i<4;i++)
//		{
//			for(int j=0;j<5;j++)
//			{
//				if(arr1[i]==D2[j].getDoctorId())
//				{
//					D10[i]=&D2[j];
//				}
//			}
//		}
//		int arr2;
//		Doctor *D11[5];
//		arr2=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient2/EHR/EHR1.dat");
//		for(int j=0;j<5;j++)
//		{
//			if(arr2==D2[j].getDoctorId())
//			{
//				D11[0]=&D2[j];
//			}
//		}
//		int arr3[3];
//		Doctor *D12[5];
//		for(int i=0;i<3;i++)
//		{
//			arr3[i]=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient3/EHR/EHR"+to_string(i+1)+".dat");
//		}
//		for(int i=0;i<3;i++)
//		{
//			for(int j=0;j<5;j++)
//			{
//				if(arr3[i]==D2[j].getDoctorId())
//				{
//					D12[i]=&D2[j];
//				}
//			}
//		}
//		int arr4[5];
//		Doctor *D13[5];
//		for(int i=0;i<5;i++)
//		{
//			arr4[i]=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient4/EHR/EHR"+to_string(i+1)+".dat");
//		}
//		for(int i=0;i<5;i++)
//		{
//			for(int j=0;j<5;j++)
//			{
//				if(arr4[i]==D2[j].getDoctorId())
//				{
//					D13[i]=&D2[j];
//				}
//			}
//		}
//		int arr5;
//		Doctor *D14[5];
//		arr5=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient5/EHR/EHR"+to_string(1)+".dat");
//		for(int j=0;j<5;j++)
//		{
//			if(arr5==D2[j].getDoctorId())
//			{
//				D14[0]=&D2[j];
//			}
//		}
//		int arr6[4];
//		Doctor *D15[5];
//		for(int i=0;i<4;i++)
//		{
//			arr6[i]=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient6/EHR/EHR"+to_string(i+1)+".dat");
//		}
//		for(int i=0;i<4;i++)
//		{
//			for(int j=0;j<5;j++)
//			{
//				if(arr6[i]==D2[j].getDoctorId())
//				{
//					D15[i]=&D2[j];
//				}
//			}
//		}
//		int arr7[4];
//		Doctor *D16[5];
//		for(int i=0;i<4;i++)
//		{
//			arr7[i]=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient7/EHR/EHR"+to_string(i+1)+".dat");
//		}
//		for(int i=0;i<4;i++)
//		{
//			for(int j=0;j<5;j++)
//			{
//				if(arr7[i]==D2[j].getDoctorId())
//				{
//					D16[i]=&D2[j];
//				}
//			}
//		}
//		int arr8[2];
//		Doctor *D17[5];
//		for(int i=0;i<2;i++)
//		{
//			arr8[i]=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient8/EHR/EHR"+to_string(i+1)+".dat");
//		}
//		for(int i=0;i<2;i++)
//		{
//			for(int j=0;j<5;j++)
//			{
//				if(arr8[i]==D2[j].getDoctorId())
//				{
//					D17[i]=&D2[j];
//				}
//			}
//		}
//		int arr9;
//		Doctor *D18[5];
//		arr9=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient9/EHR/EHR"+to_string(1)+".dat");
//		for(int j=0;j<5;j++)
//		{
//			if(arr9==D2[j].getDoctorId())
//			{
//				D18[0]=&D2[j];
//			}
//		}
//		int arr10[5];
//		Doctor *D19[5];
//		for(int i=0;i<5;i++)
//		{
//			arr10[i]=readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient10/EHR/EHR"+to_string(i+1)+".dat");
//		}
//		for(int i=0;i<5;i++)
//		{
//			for(int j=0;j<5;j++)
//			{
//				if(arr10[i]==D2[j].getDoctorId())
//				{
//					D19[i]=&D2[j];
//				}
//			}
//		}
		//char pass[10]="p1@123";
		cout<<"chk";
		//char plname[30]="sarfraz";
		//char occup[30]="mazdoor";
//		Patient l;
//		Patient P[10]={
//		{1,"p1@123","Sarfraz Ahmed",40,"Mazdoor",4},
//		{2,"p2@123","Babar Azam",40,"Chaprasi",1},
//		{3,"p3@123","Shadab khan",40,"Mechanic",3},
//		{4,"p4@123","Shaheen Afridi",40,"Carpenter",5},
//		{5,"p5@123","Naseem Shah",40,"Mazdoor",1},
//		{6,"p6@123","Iftikhar Ahmed",40,"Chaprasi",4},
//		{7,"p7@123","Muhammad Rizwan",40,"Mechanic",4},
//		{8,"p8@123","Fakhar Zaman",40,"Carpenter",2},
//		{9,"p9@123","Imad Wasim",40,"Mazdoor",1},
//		{10,"p10@123","Imam-Ul-Haq",40,"Chaprasi",5}
//		};
//	Patient P[10];//={
//		{1,"p1@123","Sarfraz Ahmed",40,"Mazdoor",4},
//		{2,"p2@123","Babar Azam",40,"Chaprasi",1},
//		{3,"p3@123","Shadab khan",40,"Mechanic",3},
//		{4,"p4@123","Shaheen Afridi",40,"Carpenter",5},
//		{5,"p5@123","Naseem Shah",40,"Mazdoor",1},
//		{6,"p6@123","Iftikhar Ahmed",40,"Chaprasi",4},
//		{7,"p7@123","Muhammad Rizwan",40,"Mechanic",4},
//		{8,"p8@123","Fakhar Zaman",40,"Carpenter",2},
//		{9,"p9@123","Imad Wasim",40,"Mazdoor",1},
//		{10,"p10@123","Imam-Ul-Haq",40,"Chaprasi",5}
//		};
//	writepatient(P,10);
//	Patient *P1;			// Declare a pointer to a Patient object.
//	P1=readpatient();		// Read in all Patient objects.
//	assignDoctors(P1,D2);		// assign doctors to each patient.
//	int choice_usr;				// Initialize variables for user input and file paths.
//	string path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//	EHR temp;
//	// Read in electronic health records (EHR) for each patient and doctor combination.
//	for(int i=0;i<10;i++)
//	{
//		path=path+to_string(i+1)+"/EHR/EHR";
//		for(int j=0;j<P1[i].getIndexdoctor();j++)
//		{
//			path=path+to_string(j+1)+".dat";
//			readEHR(temp,path);
//			P1[i].getEHR(j)=temp;
//			path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//			path=path+to_string(i+1)+"/EHR/EHR";
//		}
//		path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//	}
//	path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//	IOT I1;
//	// Read in internet of things (IOT) data for each patient.
//	for(int i=0;i<10;i++)
//	{
//		path=path+to_string(i+1)+"/IOT.dat";
//		readIOT(I1,path,0);
//		path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//	}
//	// Display a welcome message and prompt the user for their choice.
//	cout<<"\nWelcome to RMC System.....\n";
//	while(contin=='Y'|| contin=='y')
//	{
//		cout<<"\nEnter Your choice: \n1.Patient\n2.Doctor\n";
//		cin>>choice_usr;
//		while(choice_usr<1 && choice_usr>2)
//		{
//			cout<<"\nInvalid Input!try again:";
//			cin>>choice_usr;
//		}
//		switch(choice_usr)
//		{
//		case 1:
//			//PatientPortal(P1,D2);	// Call the PatientPortal function and pass in the Patient and Doctor object.
//
//			break;
//		case 2:
//			//DoctorPortal(P1,D2);	// Call the DoctorPortal function and pass in the Patient and Doctor objects.
//			break;
//		}
//		// Prompt the user to continue or quit the program
//		cout<<"\nWelcome Back to RMC portal...\nDo you wnat to continue?(Y/N):";
//		cin>>contin;
//		while(contin!='Y' && contin!='y' && contin!='N' && contin!='n')
//		{
//			cout<<"\nInvalid Character !Enter Again:";
//			cin>>contin;
//		}
//	}
//
//	// Write out the IOT data for each patient.
//	for(int i=0;i<10;i++)
//	{
//		callIOTwrite(i);
//	}
//	// Write out the EHR data for each patient and doctor combination
//	path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//	for(int i=0;i<10;i++)
//	{
//		path=path+to_string(i+1)+"/EHR/EHR";
//		for(int j=0;j<P1[i].getIndexdoctor();j++)
//		{
//			path=path+to_string(j+1)+".dat";
//			storeEHR(path,P1[i].getDocIds(j),P1[i].getEHR(j));
//			path=path+to_string(i+1)+"/EHR/EHR";
//		}
//		path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//	}
//	writepatient(P1,10);		//write all patient objects.
//	writeDoctor(D2,5);			//write all doctor objects.
}
//void writepatient(Patient *P,int size)
//{
//	ofstream fout;			//create file object
//	fout.open("/home/safi/Documents/Semester2/OOP/Project/objectlists/Patientlist.dat",ios::binary);	//associat file to specific path.
//	if(fout.is_open())
//	{
//		cout<<"Open:";
////		for(int i=0;i<size;i++)
////		{
////			fout.write(reinterpret_cast<char *>(&P[i]),sizeof(P[i]));		//write object by object.
////		}
//	}
//	fout.close();		//closing file.
//}
//Patient* readpatient()
//{
//	ifstream fin;			//create file object
//	Patient * P=NULL;
//	fin.open("/home/safi/Documents/Semester2/OOP/Project/objectlists/Patientlist.dat",ios::binary);
//	if(fin.is_open())
//	{
//		P = new Patient[10];
//		int i=0;
//		while(fin.read((char *)(&P[i]),sizeof(P[i])))
//		{
//			i++;
//		}
//
//	}
//	fin.close();		//closing file.
//	return P;
//
//}
//void writeDoctor(Doctor *D,int size)	//write doctor object by object.
//{
//	ofstream fout;
//	fout.open("/home/safi/Documents/Semester2/OOP/Project/objectlists/Doctorlist.dat",ios::binary);
//	for(int i=0;i<size;i++)
//	{
//		fout.write(reinterpret_cast<char *>(&D[i]),sizeof(D[i]));
//	}
//	fout.close();
//}
Doctor  * readDoctor ()
{
	ifstream fin;		//associat to specific file and read object by object.
	Doctor *D=NULL;
	fin.open("/home/safi/Documents/Semester2/OOP/Project/objectlists/Doctorlist.dat",ios::binary);
	if(fin.is_open())
	{

		D=new Doctor[5];
		int i=0;
		while(fin.read((char *)(&D[i]),sizeof(D[i])))
		{
			i++;
		}
	}
	fin.close();
	return D;

}
//void writeEHR(string path,int doc_id)		//Add input and then forward it to store EHR object.
//{
//	EHR E;
//	char input[255];
//	cout<<"\nEnter consultation:";
//	cin.getline(input,255);
//	E.setConsultation(input);
//	cout<<"\nEnter prescribtions:";
//	cin.getline(input,255);
//	E.setPrescribtions(input);
//	cout<<"\nEnter recommendations:";
//	cin.getline(input,255);
//	E.setRecommendations(input);
//	cout<<"\nEnter dietry_restriction:";
//	cin.getline(input,255);
//	E.setDietryRestriction(input);
//	cout<<"\nEnter allergies:";
//	cin.getline(input,255);
//	E.setAllergies(input);
//	cout<<"\nEnter regular_medication";
//	cin.getline(input,255);
//	E.setRegularMedication(input);
//	cout<<"\nEnter chronic_health_condition:";
//	cin.getline(input,255);
//	E.setChronicHealthCondition(input);
//	for(int i=0;i<4;i++)
//	{
//		cout<<"\nEnter time of Appointment "<<i<<":";
//		cin.getline(input,255);
//		E.setAppointments(input,i);
//	}
//	storeEHR(path,doc_id,E);
//}
//void storeEHR(string path,int doc_id,EHR &E)  //associate specific file and store EHR object.
//{
//	encryptEHR(E);
//	ofstream fout;
//	fout.open(path,ios::binary);
//	fout.write(reinterpret_cast<char *>(&E),sizeof(E));
//	fout.write(reinterpret_cast<char *>(&doc_id),sizeof(doc_id));
//	fout.close();
//}
//void callIOTwrite(int index)		//create specific path for file writing and then call file writing function.
//{
//	string path= "/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//	path=path+to_string(index+1) + "/IOT.dat";
//	IOT I;
//	writeIOT(I,path);
//}
//void writeIOT(IOT & I,string path)
//{
//	encryptIOT(I);
//	ofstream fout;
//	fout.open(path,ios::binary|ios::app);
//	fout.write(reinterpret_cast<char *>(&I), sizeof(I));
//	fout.close();
//}
//void readIOT(IOT & I,string path,bool check)
//{
//	ifstream fin;
//	fin.open(path,ios::binary);
//	int i=1;
//	while(fin.read((char *)(&I),sizeof(I)))
//	{
//		decryptIOT(I);
//		if(check==1)
//		{
//			cout<<"\n"<<i<<"......\n";
//			I.Dispaly();
//			i++;
//		}
//	}
//	fin.close();
//}
//void assignDoctors(Patient *P,Doctor *D2)			//aggregate relevant doctor to each patient.
//{
//	for(int i=0;i<10;i++)
//	{
//		for(int j=0;j<P[i].getIndexdoctor();j++)
//		{
//			for(int k=0;k<5;k++)
//			{
//				if(P[i].getDocIds(j)==D2[k].getDoctorId())
//				{
//					P[i].setDoctor(D2[k],j);
//				}
//			}
//		}
//	}
//
//}
//void PatientPortal(Patient *P,Doctor * D)
//{
//	int id,usr_choice;
//	char check;
//	bool doc_full=0;
//	char password[20];
//	bool i=1;
//	cout<<"\nWElcome to login portal...";		//login inputs and validation and confirmation.
//	while(i)
//	{
//		cout<<"\nEnter Your Login Id:";
//		cin>>id;
//		while(id<1 ||id>10)
//		{
//			cout<<"\nInvalid Id!Type again:";
//			cin>>id;
//		}
//		cout<<"\nConfirmation required Patient ID:"<<id<<"\nEnter your choice(Y/N):";
//		cin>>check;
//		if(check=='Y'|| check=='y')
//		{
//			i=0;
//		}
//	}
//	cin.ignore();
//	cout<<"\nEnter Your Password:";
//	cin.getline(password, 20);
//	for(int i=0;(i<=3&&strcmp(P[id-1].getPassword(),password)!=0);i++)
//	{
//		if(i==3)
//		{
//			cout<<"\nBreach Error !Program Aborted:\n";
//			exit(-1);
//		}
//		cout<<"\nInvalid Password!Type Again:";
//		cin.getline(password, 20);
//	}
//	char cont='y';
//	while(cont=='y' || cont=='Y')
//	{
//		cout<<"\nWELCOME TO PATIENT PORTAL....\n";		//Displaying Menue.
//		cout<<"\n1.See EHR";
//		cout<<"\n2.See IOT";
//		cout<<"\n3.Add Appointment.";
//		cout<<"\n4.Set Permission.";
//		cout<<"\n5.Set Password.";
//		if(P[id-1].getIndexdoctor()==5)
//		{
//
//			cout<<"\n6.Exit\n";
//			doc_full=1;
//		}
//		else
//		{
//			cout<<"\n6.Add Doctor.";
//			cout<<"\n7.Exit\n";
//		}
//		cin>>usr_choice;
//		int limit=7;
//		if(doc_full==1)
//		{
//			limit=6;
//		}
//		while(usr_choice<1 ||usr_choice>limit)
//		{
//			cout<<"\nInvalid Input!Try Again:";
//			cin>>usr_choice;
//		}
//		if(doc_full==1 && usr_choice>=6)
//		{
//				usr_choice++;
//		}
//		int doctor_choose;
//		int app_choice;
//		switch(usr_choice)			//switch to run specific case selected from menue.
//		{
//		case 1:
//			cout<<"\nYou Have\n";
//			for(int i=0;i<P[id-1].getIndexdoctor();i++)
//			{
//				cout<<i+1<<"."<<P[id-1].getD(i).getName()<<endl;
//			}
//			cout<<"\nEnter Your Choice of Doctor for EHR:";
//			cin>>doctor_choose;
//			while(doctor_choose<1 || doctor_choose>P[id-1].getIndexdoctor())
//			{
//				cout<<"\nInvalid Input!Try Again:";
//				cin>>doctor_choose;
//			}
//			P[id-1].printpatient();
//			P[id-1].getEHR(doctor_choose-1).Display();
//			cin.ignore();
//			cout<<"Press any key to continue:";
//			getch();
//			break;
//		case 2:
//			int choice;
//			cout<<"\n1.Current or \n2.3 Months";
//			cin>>choice;
//			while(choice<1 || choice>2)
//			{
//				cout<<"\nInvalid Input!";
//				cin>>choice;
//			}
//			if(choice==2)
//			{
//
//				string path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//				path=path+to_string(id)+"/IOT.dat";
//				cout<<path<<endl;
//				readIOT(P[id-1].getIOT(),path,1);
//			}
//			else
//			{
//				P[id-1].printpatient();
//				P[id-1].getIOT().Dispaly();
//			}
//			cin.ignore();
//			cout<<"\nPress any key to continue:";
//			getch();
//			break;
//		case 3:
//			app_choice=0;
//			char App_time[50];
//			cout<<"\nYou Have following Doctors\n";
//			for(int i=0;i<P[id-1].getIndexdoctor();i++)
//			{
//				cout<<i+1<<"."<<P[id-1].getD(i).getName()<<"\t"<<P[id-1].getD(i).getDegree()<<endl;
//			}
//			cout<<"\nEnter Your Choice:";
//			cin>>app_choice;
//			while(app_choice<1 || app_choice>P[id-1].getIndexdoctor())
//			{
//				cout<<"\nInvalid Input!Type Again:";
//				cin>>app_choice;
//			}
//			cout<<"\nEnter Date and Time:";
//			cin.ignore();
//			cin.getline(App_time, 50);
//			cout<<App_time<<endl;
//			P[id-1].getD(app_choice-1).addappointmentreq(id-1);				//update doctor request Array.
//			P[id-1].getD(app_choice-1).setapp_time(App_time, id-1);
//			cout<<"\nAppointment Requested Successfully....\nPress any key to continue:";
//			getch();
//			break;
//		case 4:
//			int per_choice;
//			cout<<"\nYou Have following Doctors\n";
//			for(int i=0;i<P[id-1].getIndexdoctor();i++)
//			{
//				cout<<i+1<<P[id-1].getD(i).getName()<<"\t"<<P[id-1].getD(i).getDegree()<<endl;
//			}
//			cout<<"\nEnter Your Choice:";
//			cin>>app_choice;
//			while(app_choice<1 || app_choice>P[id-1].getIndexdoctor())
//			{
//				cout<<"\nInvalid Input!Type Again:";
//				cin>>app_choice;
//			}
//			cout<<"\nYou want to \n1.Grant \nor \n2.Deny  \nEnter Your choice:";
//			cin>>per_choice;
//			while(per_choice<1 ||per_choice>2)
//			{
//				cout<<"\nInvalid Input!Try Again:";
//				cin>>per_choice;
//			}
//			if((per_choice==1 && P[id-1].getpermission(app_choice-1)==1)||(per_choice==2 && P[id-1].getpermission(app_choice-1)==0))
//			{
//				cin.ignore();
//				cout<<"\nRequested Permission already exists!press ANY KEY TO EXIT:";
//				getch();
//			}
//			else
//			{
//				if(per_choice==1)
//				{
//					P[id-1].setpermission(app_choice-1);
//				}
//				else
//				{
//					P[id-1].removepermission(app_choice-1);
//				}
//				cin.ignore();
//				cout<<"\nPermission removed Successfully!Press any key to exit!";
//				getch();
//			}
//			break;
//		case 5:
//			cin.ignore();
//			char new_pass[50];
//			cout<<"\nEnter New Password:";
//			cin.getline(new_pass,50);
//			P[id-1].setPassword(new_pass);
//			cin.ignore();
//			cout<<"\nPassword Changed Successfully!Press any key to exit!";
//			getch();
//			break;
//		case 6:
//			if(doc_full==0)				//Add new Doctor to Patient.
//			{
//				int *arr;
//				arr=new int [5-(P[id-1].getIndexdoctor())];
//				cout<<"\nAvaliable Doctors are\n";
//				int i=1;
//				bool check2=1;
//				for(int j=0;j<5;j++)
//				{
//					check2=1;
//					for(int k=0;k<P[id-1].getIndexdoctor();k++)
//					{
//						if(D[j].getDoctorId()==P[id-1].getDocIds(k))
//						{
//							check2=0;
//						}
//					}
//					if(check2==1)
//					{
//						cout<<i<<"."<<D[j].getName()<<"\t"<<D[j].getDegree()<<endl;
//						arr[i-1]=D[j].getDoctorId();
//						i++;
//					}
//				}
//				cout<<"Enter Your Choice:";
//				cin>>doctor_choose;
//				while(doctor_choose<1 || doctor_choose>(i))
//				{
//					cout<<"\nInvalid Input!Try Again:";
//					cin>>doctor_choose;
//				}
//				P[id-1].setIndexdoctor(P[id-1].getIndexdoctor()+1);
//				P[id-1].setDocIds(arr[doctor_choose-1], P[id-1].getIndexdoctor()-1);
//				P[id-1].setDoctor(D[arr[doctor_choose-1]-1], P[id-1].getIndexdoctor()-1);
//				P[id-1].getD(P[id-1].getIndexdoctor()-1).setEhrreq(id-1);
//				P[id-1].setpermission(P[id-1].getIndexdoctor()-1);
//				cout<<P[id-1].getDocIds(P[id-1].getIndexdoctor()-1);
//				cin.ignore();
//				cout<<"\nDoctor Added Successfully....\nPress any key to continue:";
//				getch();
//				delete []arr;
//				arr=0;
//			}
//			break;
//		case 7:
//			cont='n';
//			break;
//		}
//		if(cont!='n')
//		{
//			cout<<"\nDo you want to continue!(Y/N):";
//			cin>>cont;
//		}
//		while((cont !='n' && cont!='N') && (cont!='y'&& cont!='Y'))
//		{
//			cout<<"\nInvalid Input!Try again:";
//			cin>>cont;
//		}
//	}
//}
//void DoctorPortal(Patient *P,Doctor * D)
//{
//	int oper_choice;
//	char password[20];
//	bool i=1;
//	int id;
//	char check;
//	cout<<"\nWElcome to Doctor login portal...";				//login inputs and validation and confirmation.
//	while(i)
//	{
//		cout<<"\nEnter Your Login Id:";
//		cin>>id;
//		while(id<1 ||id>10)
//		{
//			cout<<"\nInvalid Id!Type again:";
//			cin>>id;
//		}
//		cout<<"\nConfirmation required Patient ID:"<<id<<"\nEnter your choice(Y/N):";
//		cin>>check;
//		while(check!='Y' && check!='y' && check!='n' && check!='N')
//		{
//			cout<<"\nInvalid Input !Try Again:";
//			cin>>check;
//		}
//		if(check=='Y'|| check=='y')
//		{
//			i=0;
//		}
//	}
//	cin.ignore();
//	cout<<"\nEnter Your Password:";
//	cin.getline(password, 20);
//	cout<<password<<endl;
//	for(int i=0;i<3&& strcmp(D[id-1].getPassword(),password)!=0;i++)
//	{
//		if(i==3)
//		{
//			cout<<"\nBreach Error !Program Aborted:\n";
//			exit(-1);
//		}
//		cout<<"\nInvalid Password!Type Again:";
//		cin.getline(password, 20);
//	}
//	cout<<"\nWelcome to Doctor Portal....\n";
//	string path;
//	int cap_loc=0;
//	for(int i=0;i<10;i++)			//Writing EHRs of newly aggregated patients.
//	{
//		if(D[id-1].getEhrreq(i)==-1)
//		{
//			cout<<"You have to write EHR file for:\n";
//			P[i].printpatient();
//			path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//			path=path+to_string(i+1)+"/EHR/EHR";
//			for(int j=0;j<P[i].getIndexdoctor();j++)
//			{
//				if(P[i].getDocIds(j)==D[id-1].getDoctorId())
//				{
//					path=path+to_string(j+1)+".dat";
//					cap_loc=j;
//					break;
//				}
//			}
//			writeEHR(path,id);
//			readEHR(P[i].getEHR(cap_loc),path);
//			D[id-1].normalEhrreq(i);
//			cin.ignore();
//			cout<<"\nFile wrote successfully!Press any key to continue:";
//			getch();
//		}
//	}
//	char contin='Y';
//	while(contin=='Y'||contin=='y')
//	{
//		contin=P[id-1].patientmenu(D);
//		if(contin!='n'){
//			cout<<"\nWelcome back to Doctor Portal:\nDo you want to continue(Y/N):";
//			cin>>contin;
//		}
//		while(contin!='N' && contin!='n' && contin!='Y' && contin!='y')
//		{
//			cout<<"\nInvalid Input!Try Again:";
//			cin>>contin;
//		}
//	}
//}
//void seeEHRtoD(Patient *P,Doctor &D)
//{
//	int *arr;
//	int *indexdoc;
//	int size=0;
//	int usr_choice;
//	for(int i=0;i<10;i++)
//	{
//		for(int j=0;j<P[i].getIndexdoctor();j++)			//collecting desired Patients.
//		{
//			if(D.getDoctorId()==P[i].getDocIds(j))
//			{
//				size++;
//			}
//		}
//	}
//	arr=new int [size];
//	indexdoc=new int [size];
//	int k=0;
//	for(int i=0;i<10;i++)
//	{
//		for(int j=0;j<P[i].getIndexdoctor();j++)
//		{
//			if(D.getDoctorId()==P[i].getDocIds(j))
//			{
//				arr[k]=i;
//				indexdoc[k]=j;
//				k++;
//			}
//		}
//	}
//	cout<<"\nYou Have Following Patients.\n";		//Dispalying relevant patients.
//	for(int i=0;i<size;i++)
//	{
//		cout<<i+1<<"...........\n";
//		P[arr[i]].printpatient();
//	}
//	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
//	cin>>usr_choice;
//	while(usr_choice<1 || usr_choice>size)
//	{
//		cout<<"\nInvalid Input!Try Again:";
//		cin>>usr_choice;
//	}
//	P[arr[usr_choice-1]].printpatient();				//Displaying EHR of a patient.
//	P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).Display();
//	cin.ignore();
//	cout<<"\nFile Displayed successfully!Press any key to continue:";
//	getch();
//
//}
//void EditEHR(Patient *P,Doctor &D)				//EDit EHR of Patient.
//{
//	int *arr;
//	int *indexdoc;
//	int size=0;
//	int usr_choice;
//	for(int i=0;i<10;i++)
//	{
//		for(int j=0;j<P[i].getIndexdoctor();j++)
//		{
//			if(D.getDoctorId()==P[i].getDocIds(j))
//			{
//				size++;
//			}
//		}
//	}
//	arr=new int [size];
//	indexdoc=new int [size];
//	int k=0;
//	for(int i=0;i<10;i++)
//	{
//		for(int j=0;j<P[i].getIndexdoctor();j++)
//		{
//			if(D.getDoctorId()==P[i].getDocIds(j))
//			{
//				arr[k]=i;
//				indexdoc[k]=j;
//				k++;
//			}
//		}
//	}
//	cout<<"\nYou Have Following Patients.\n";			//Displaying relevant patients.
//	for(int i=0;i<size;i++)
//	{
//		cout<<i+1<<"...........\n";
//		P[arr[i]].printpatient();
//	}
//	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
//	cin>>usr_choice;
//	while(usr_choice<1 || usr_choice>size)
//	{
//		cout<<"\nInvalid Input!Try Again:";
//		cin>>usr_choice;
//	}
//	if(P[arr[usr_choice-1]].getpermission(indexdoc[usr_choice-1])==1)				//checking for permission of editing.
//	{
//		int choiceedit;
//		char input[60];
//		char editmore='Y';
//		while(editmore=='Y'||editmore=='y')
//		{
//			cout<<"\nYou can change the following things..\n";
//			cout<<"1.Consultation."<<endl;
//			cout<<"2.Prescribtion."<<endl;
//			cout<<"3.Allergy condition."<<endl;
//			cout<<"4.Recommendations."<<endl;
//			cout<<"5.dietry_restriction"<<endl;
//			cout<<"6.regular_medication"<<endl;
//			cout<<"7.charchronic_health_condition"<<endl;
//			cout<<"\nEnter Your Choice:";
//			cin>>choiceedit;
//			while(choiceedit<1 || choiceedit>7)
//			{
//				cout<<"\nInvalid Input:Try Again:";
//				cin>>choiceedit;
//			}
//			cout<<"\nEnter your input for Editing:";
//			cin.ignore();
//			cin.getline(input, 60);
//			switch(choiceedit)			//Editing specific value based on choice.
//			{
//			case 1:
//				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setConsultation(input);
//				break;
//			case 2:
//				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setPrescribtions(input);
//				break;
//			case 3:
//				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setAllergies(input);
//				break;
//			case 4:
//				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setRecommendations(input);
//				break;
//			case 5:
//				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setDietryRestriction(input);
//				break;
//			case 6:
//				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setRegularMedication(input);
//				break;
//			case 7:
//				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setChronicHealthCondition(input);
//				break;
//			}
//			//storeEHR()[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1])
//			cout<<"\nValue Edited Successfully!\n";
//			cout<<"Do you want to continue editing EHR(Y/N):";
//			cin>>editmore;
//			while(editmore!='n' && editmore!='N' && editmore!='Y' && editmore!='y')
//			{
//				cout<<"\nInvalid Character !Enter Again:";
//				cin>>editmore;
//			}
//		}
//	}
//	else
//	{
//		cin.ignore();
//		cout<<"\nSorry!You are not permitted to make changes in this EHR!press any key to exit:";
//		getch();
//
//	}
//}
//void seeIOTtoD(Patient *P,Doctor &D)		//seeing IOT record of Patient.
//{
//	int *arr;
//	int *indexdoc;
//	int size=0;
//	int usr_choice;
//	for(int i=0;i<10;i++)
//	{
//		for(int j=0;j<P[i].getIndexdoctor();j++)
//		{
//			if(D.getDoctorId()==P[i].getDocIds(j))
//			{
//				size++;
//			}
//		}
//	}
//	arr=new int [size];
//	indexdoc=new int [size];
//	int k=0;
//	for(int i=0;i<10;i++)
//	{
//		for(int j=0;j<P[i].getIndexdoctor();j++)
//		{
//			if(D.getDoctorId()==P[i].getDocIds(j))
//			{
//				arr[k]=i;
//				indexdoc[k]=j;
//				k++;
//			}
//		}
//	}
//	cout<<"\nYou Have Following Patients.\n";
//	for(int i=0;i<size;i++)
//	{
//		cout<<i+1<<"...........\n";
//		P[arr[i]].printpatient();
//	}
//	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
//	cin>>usr_choice;
//	while(usr_choice<1 || usr_choice>size)
//	{
//		cout<<"\nInvalid Input!Try Again:";
//		cin>>usr_choice;
//	}
//	cin.ignore();
//	int choice;
//	P[arr[usr_choice-1]].printpatient();
//	cout<<"\n1.Current or \n2.3 Months";
//	cin>>choice;
//	while(choice<1 || choice>2)
//	{
//		cout<<"\nInvalid Input!";
//		cin>>choice;
//	}
//	if(choice==2)
//	{
//		string path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
//		path=path+to_string(arr[usr_choice-1]+1)+"/IOT.dat";
//		readIOT(P[arr[usr_choice-1]].getIOT(),path,1);
//	}
//	else
//	{
//		P[arr[usr_choice-1]].getIOT().Dispaly();
//	}
//	cout<<"\nFile Displayed successfully!Press any key to continue:";
//	getch();
//}
//void Mngeappointreq(Patient *P,Doctor &D)		//Manages appointment requests of relevant patient.
//{
//	bool check=0;
//	int size=0;
//	for(int i=0;i<10;i++)
//	{
//		if(D.getappointmentreq(i)==-1)
//		{
//			check=1;
//			size++;
//		}
//	}
//	if(check==1)
//	{
//		int *arr=new int [size];
//		int doc_choice;
//		int j=0;
//		for(int i=0;i<10;i++)
//		{
//			if(D.getappointmentreq(i)==-1)
//			{
//				arr[j]=i;
//				j++;
//			}
//		}
//		cout<<"\nYou Have following requests:\n";
//		for(int i=0;i<size;i++)
//		{
//			cout<<i+1<<"....\n";
//			P[arr[i]].printpatient();
//			cout<<"Time:"<<D.getapp_time(arr[i]);
//		}
//		cout<<"\nEnter Your Choice For approval:";
//		cin>>doc_choice;
//		while(doc_choice<1 || doc_choice>size)
//		{
//			cout<<"\nInvalid Input!Try Again:";
//			cin>>doc_choice;
//		}
//		int doc_index=0;
//		for(int i=0;i<P[arr[doc_choice-1]].getIndexdoctor();i++)
//		{
//			if(P[arr[doc_choice-1]].getDocIds(i)==D.getDoctorId())
//			{
//				doc_index=i;
//			}
//		}
//		for(int i=0;i<3;i++)
//		{
//			P[arr[doc_choice-1]].getEHR(doc_index).setAppointments((P[arr[doc_choice-1]].getEHR(doc_index).getAppointments(i+1)),i);
//		}
//		P[arr[doc_choice-1]].getEHR(doc_index).setAppointments(D.getapp_time(arr[doc_choice-1]),4);
//		cin.ignore();
//		cout<<"\nAppointment Added Successfully....\nPress any key to exit";
//		getch();
//	}
//	else
//	{
//		cin.ignore();
//		cout<<"\nOOPS!You don't have any Appointment request!Press any key to exit!";
//		getch();
//	}
//}
//// Below functions are for Encryption and Decryption.
//void encryptEHR(EHR &E)
//{
//	char encrypt[255];
//	strcpy(encrypt,E.getConsultation());
//	int j=0;
//	while(encrypt[j]!='\0')
//	{
//		encrypt[j]+=10;
//		j++;
//	}
//	E.setConsultation(encrypt);
//	strcpy(encrypt,E.getAllergies());
//	j=0;
//	while(encrypt[j]!='\0')
//	{
//		encrypt[j]+=10;
//		j++;
//	}
//	E.setAllergies(encrypt);
//	strcpy(encrypt,E.getChronicHealthCondition());
//	j=0;
//	while(encrypt[j]!='\0')
//	{
//		encrypt[j]+=10;
//		j++;
//	}
//	E.setChronicHealthCondition(encrypt);
//	strcpy(encrypt,E.getDietryRestriction());
//	j=0;
//	while(encrypt[j]!='\0')
//	{
//		encrypt[j]+=10;
//		j++;
//	}
//	E.setDietryRestriction(encrypt);
//	strcpy(encrypt,E.getPrescribtions());
//	j=0;
//	while(encrypt[j]!='\0')
//	{
//		encrypt[j]+=10;
//		j++;
//	}
//	E.setPrescribtions(encrypt);
//	strcpy(encrypt,E.getRecommendations());
//	j=0;
//	while(encrypt[j]!='\0')
//	{
//		encrypt[j]+=10;
//		j++;
//	}
//	E.setRecommendations(encrypt);
//	strcpy(encrypt,E.getRegularMedication());
//	j=0;
//	while(encrypt[j]!='\0')
//	{
//		encrypt[j]+=10;
//		j++;
//	}
//	E.setRegularMedication(encrypt);
//	for(int i=0;i<4;i++)
//	{
//		strcpy(encrypt,E.getAppointments(i));
//		j=0;
//		while(encrypt[j]!='\0')
//		{
//			encrypt[j]+=10;
//			j++;
//		}
//		E.getAppointments(i);
//	}
//}
//void encryptIOT(IOT & I)
//{
//	int inputint;
//	float inputfloat;
//	inputint=I.getBp(0);
//	inputint<<=2;
//	I.setBp(inputint, 0);
//	inputint=I.getBp(1);
//	inputint<<=2;
//	I.setBp(inputint, 1);
//	inputfloat=I.getBmi();
//	inputfloat+=90;
//	I.setBmi(inputfloat);
//	inputint=I.getOxygenSaturationPrcnt();
//	inputint<<=2;
//	I.setOxygenSaturationPrcnt(inputint);
//	inputint=I.getPulse();
//	inputint<<=2;
//	I.setPulse(inputint);
//	inputfloat=I.getSugarLevel();
//	inputfloat+=90;
//	I.setSugarLevel(inputfloat);
//	inputfloat=I.getTemperature();
//	inputfloat+=90;
//	I.setTemperature(inputfloat);
//}
//void decryptIOT(IOT & I)
//{
//	int inputint;
//	float inputfloat;
//	inputint=I.getBp(0);
//	inputint>>=2;
//	I.setBp(inputint, 0);
//	inputint=I.getBp(1);
//	inputint>>=2;
//	I.setBp(inputint, 1);
//	inputfloat=I.getBmi();
//	inputfloat-=90;
//	I.setBmi(inputfloat);
//	inputint=I.getOxygenSaturationPrcnt();
//	inputint>>=2;
//	I.setOxygenSaturationPrcnt(inputint);
//	inputint=I.getPulse();
//	inputint>>=2;
//	I.setPulse(inputint);
//	inputfloat=I.getSugarLevel();
//	inputfloat-=90;
//	I.setSugarLevel(inputfloat);
//	inputfloat=I.getTemperature();
//	inputfloat-=90;
//	I.setTemperature(inputfloat);
//}
