/*
 * Patient.cpp
 *
 *  Created on: May 2, 2023
 *      Author: safi
 */
//============================================================================
// Name        : Patient.cpp
// Author      : Saif Ur Rehman
// ROLL NO     :i22-1697
//============================================================================
#include "header.h"
//Constructor.
Patient::Patient(int id,char password[],char name[],int age,char occupation[],int ind){
	this->patient_id=id;
	strcpy(this->password , password);
	strcpy(this->patient_Name, name);
	this->age=age;
	strcpy(this->occupation , occupation);
	int i=0;
	this->indexdoctor=ind;
	for(int i=0;i<this->indexdoctor;i++)
	{
		this->D[i]=D[i];
	}
	if(doc_ids==NULL)
	{
		for(int i=0;i<this->indexdoctor;i++)
		{
			this->doc_ids[i]=-1;
		}
	}
	else
	{
		for(int i=0;i<this->indexdoctor;i++)
		{
			this->doc_ids[i]=doc_ids[i];
		}
		if(this->indexdoctor<5)
		{
			for(int i=this->indexdoctor;i<5;i++)
			{
				this->doc_ids[i]=-1;
			}
		}
	}
	for(int i=0;i<this->indexdoctor;i++)
	{
		this->D[i]=D[i];
	}
	while(i<5&& D[i]!=NULL)
	{
		this->D[i]=D[i];
		i++;
	}
	for(int i=0;i<this->indexdoctor;i++)
	{
		this->permission[i]=1;
	}

}

int Patient::getAge() const {
	return age;
}

void Patient::setAge(int age) {
	this->age = age;
}

Doctor& Patient::getD(int index) const {
	return *D[index];
}

void Patient::setD(Doctor *d[],int size) {
	this->indexdoctor=size;
	for(int i=0;i<this->indexdoctor;i++)
	{
		this->D[i]=d[i];
	}
	for(int i=0;i<this->indexdoctor;i++)
	{
		this->doc_ids[i]=this->D[i]->getDoctorId();
	}
	if(this->indexdoctor<5)
	{
		for(int i=this->indexdoctor;i<5;i++)
		{
			this->doc_ids[i]=-1;
		}
	}
}
void  Patient::setDoctor(Doctor & doc,int index)
{
	this->D[index]=&doc;
	this->doc_ids[index]=(this->D[index])->getDoctorId();
}
const char * Patient::getOccupation() const {
	return occupation;
}

void Patient::setOccupation(char occupation[]) {
	strcpy(this->occupation , occupation);
}

const char* Patient::getPassword() const {
	return password;
}

void Patient::setPassword(char password[]) {
	strcpy(this->password , password);
}

int Patient::getPatientId() const {
	return patient_id;
}

void Patient::setPatientId(int patientId) {
	patient_id = patientId;
}

const char* Patient::getPatientName() const {
	return patient_Name;
}

void Patient::setPatientName(char patientName[]) {
	strcpy(this->patient_Name , patientName);
}

Patient::~Patient() {
	// TODO Auto-generated destructor stub
}

int Patient::getIndexdoctor() const {
	return indexdoctor;
}

int Patient::getDocIds(int index) const {
	if(index<this->indexdoctor)
		return doc_ids[index];
	else
		return 0;
}

void Patient::setDocIds(int docIds,int index) {
	if(index<this->indexdoctor)
		this->doc_ids[index] = docIds;
}

void Patient::setIndexdoctor(int indexdoctor) {
	this->indexdoctor = indexdoctor;
}
void Patient::setpermission(int index)
{
	if(index<this->indexdoctor)
	{
		this->permission[index]=1;
	}
}
void Patient::removepermission(int index)
{
	if(index<this->indexdoctor)
	{
		this->permission[index]=0;
	}
}
bool Patient::getpermission(int index){
	return this->permission[index];

}
EHR & Patient::getEHR(int index)
{
	return this->E[index];
}
//read Specific EHRs.
void Patient::readEHRs()
{
	string path="/home/safi/Documents/Semester2/OOP/Project/Cloud/";
	for(int i=0;i<this->indexdoctor;i++)
	{
		path=path+"/Patient"+to_string(this->patient_id)+"/EHR/"+"EHR"+to_string(i+1)+".dat";
		readEHR(this->E[i],path);
		path="/home/safi/Documents/Semester2/OOP/Project/Cloud/";
	}
}
IOT& Patient::getIOT()
{
	return this->I;
}
int readEHR(EHR &E,string path)
{
	ifstream fin;
	fin.open(path,ios::binary);
	int doc_id;
	fin.read((char *)(&E),sizeof(E));
	decryptEHR(E);
	fin.read((char *)(&doc_id),sizeof(doc_id));
	fin.close();
	return doc_id;
}
void decryptEHR(EHR &E)
{
	char decrypt[255];
	strcpy(decrypt,E.getConsultation());
	int j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setConsultation(decrypt);
	strcpy(decrypt,E.getAllergies());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setAllergies(decrypt);
	strcpy(decrypt,E.getChronicHealthCondition());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setChronicHealthCondition(decrypt);
	strcpy(decrypt,E.getDietryRestriction());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setDietryRestriction(decrypt);
	strcpy(decrypt,E.getPrescribtions());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setPrescribtions(decrypt);
	strcpy(decrypt,E.getRecommendations());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setRecommendations(decrypt);
	strcpy(decrypt,E.getRegularMedication());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setRegularMedication(decrypt);
	for(int i=0;i<4;i++)
	{
		strcpy(decrypt,E.getAppointments(i));
		j=0;
		while(decrypt[j]!='\0')
		{
			decrypt[j]-=10;
			j++;
		}
		E.getAppointments(i);
	}
}
void Patient::printpatient()
{
	cout<<"\nPatient_Name:"<<this->patient_Name<<endl;
	cout<<"Patient ID:"<<this->patient_id<<endl;
	cout<<"Patient Age"<<this->age<<endl;
	cout<<"Occupation:"<<this->occupation<<endl;
}
void Patient::setcalllog(int index)
{
	this->calllog[index]=1;
}
void Patient::receivecall(int index)
{
	this->calllog[index]=0;
}
bool Patient::getcalllog(int index)
{
	return this->calllog[index];
}


