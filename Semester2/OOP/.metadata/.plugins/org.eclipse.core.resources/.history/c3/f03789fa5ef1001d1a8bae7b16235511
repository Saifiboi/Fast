/*
 * EHR.cpp
 *
 *  Created on: May 4, 2023
 *      Author: safi
 */
//============================================================================
// Name        : EHR.cpp
// Author      : Saif Ur Rehman
// ROLL NO     :i22-1697
//============================================================================
#include "EHR.h"
//Getters and Setters are defiend below.
void EHR::setAllergies(char allergies[])
{
	strcpy(this->allergies,allergies);
}
const char* EHR::getAllergies() const {
	return allergies;
}
void EHR::setAppointments(char Appointments[],int index)
{
	strcpy(this->appointments[index],Appointments);
}
char* EHR::getAppointments(int index){
	return this->appointments[index];
}
void EHR::setChronicHealthCondition(char charchronic_health_condition[])
{
	strcpy(this->charchronic_health_condition,charchronic_health_condition);
}
const char* EHR::getChronicHealthCondition() const {
	return charchronic_health_condition;
}
void EHR::setConsultation(char consultation[])
{
	strcpy(this->consultation,consultation);
}
const char* EHR::getConsultation() const {
	return consultation;
}
void EHR::setDietryRestriction(char dietry_restriction[])
{
	strcpy(this->dietry_restriction,dietry_restriction);
}
const char* EHR::getDietryRestriction() const {
	return dietry_restriction;
}
void EHR::setPrescribtions(char prescribtions[])
{
	strcpy(this->prescribtions,prescribtions);
}
const char* EHR::getPrescribtions() const {
	return prescribtions;
}
void EHR::setRecommendations(char recommendations[])
{
	strcpy(this->recommendations,recommendations);
}
const char* EHR::getRecommendations() const {
	return recommendations;
}
void EHR::setRegularMedication(char regular_medication[])
{
	strcpy(this->regular_medication,regular_medication);
}
const char* EHR::getRegularMedication() const {
	return regular_medication;
}
void EHR::operator=(EHR &E)
{
	strcpy(this->consultation,E.consultation);
	strcpy(this->charchronic_health_condition,E.charchronic_health_condition);
	strcpy(this->allergies,E.allergies);
	strcpy(this->dietry_restriction,E.dietry_restriction);
	strcpy(this->prescribtions,E.prescribtions);
	strcpy(this->recommendations,E.recommendations);
	strcpy(this->regular_medication,E.regular_medication);
	for(int i=0;i<4;i++)
	{
		strcpy(this->appointments[i],E.appointments[i]);
	}
}
//Function to Show patient EHR.
void EHR::Display()
{
	cout<<"\nConsultation:"<<this->consultation<<endl;
	cout<<"Prescribtions:"<<this->prescribtions<<endl;
	cout<<"Allergies:"<<this->allergies<<endl;
	cout<<"Chronic_health_condition:"<<this->charchronic_health_condition<<endl;
	cout<<"Recommendations:"<<this->recommendations<<endl;
	cout<<"Regular_medication:"<<this->regular_medication<<endl;
	cout<<"Dietry_restriction:"<<this->dietry_restriction<<endl;
	for(int i=0;i<4;i++)
	{
		cout<<"Appointment "<<i+1<<":"<<this->appointments[i]<<endl;
	}
}
void EHR::encryptEHR()
{
	int j=0;
	while(this->consultation[j]!='\0')
	{
		this->consultation[j]+=10;
		j++;
	}
	j=0;
	while(this->allergies[j]!='\0')
	{
		this->allergies[j]+=10;
		j++;
	}
	j=0;
	while(this->charchronic_health_condition[j]!='\0')
	{
		this->charchronic_health_condition[j]+=10;
		j++;
	}
	j=0;
	while(this->dietry_restriction[j]!='\0')
	{
		this->dietry_restriction[j]+=10;
		j++;
	}
	j=0;
	while(this->prescribtions[j]!='\0')
	{
		this->prescribtions[j]+=10;
		j++;
	}
	j=0;
	while(this->recommendations[j]!='\0')
	{
		this->recommendations[j]+=10;
		j++;
	}
	j=0;
	while(this->regular_medication[j]!='\0')
	{
		this->regular_medication[j]+=10;
		j++;
	}
	for(int i=0;i<4;i++)
	{
		j=0;
		while(this->appointments[i][j]!='\0')
		{
			this->appointments[i][j]+=10;
			j++;
		}
	}
}
void EHR::decryptEHR()
{
	char decrypt[255];
	strcpy(decrypt,E.getConsultation());
	int j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setConsultation(decrypt);
	strcpy(decrypt,E.getAllergies());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setAllergies(decrypt);
	strcpy(decrypt,E.getChronicHealthCondition());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setChronicHealthCondition(decrypt);
	strcpy(decrypt,E.getDietryRestriction());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setDietryRestriction(decrypt);
	strcpy(decrypt,E.getPrescribtions());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setPrescribtions(decrypt);
	strcpy(decrypt,E.getRecommendations());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setRecommendations(decrypt);
	strcpy(decrypt,E.getRegularMedication());
	j=0;
	while(decrypt[j]!='\0')
	{
		decrypt[j]-=10;
		j++;
	}
	E.setRegularMedication(decrypt);
	for(int i=0;i<4;i++)
	{
		strcpy(decrypt,E.getAppointments(i));
		j=0;
		while(decrypt[j]!='\0')
		{
			decrypt[j]-=10;
			j++;
		}
		E.getAppointments(i);
	}
}
void EHR::storeEHR(string path,int doc_id)  //associate specific file and store EHR object.
{
	this->encryptEHR();
	ofstream fout;
	fout.open(path,ios::binary);
	fout.write(reinterpret_cast<char *>(this),sizeof(this));
	fout.write(reinterpret_cast<char *>(&doc_id),sizeof(doc_id));
	fout.close();
}
int EHR::readEHR(string path)
{
	ifstream fin;
	fin.open(path,ios::binary);
	int doc_id;
	fin.read((char *)(this),sizeof(this));
	this->decryptEHR();
	fin.read((char *)(&doc_id),sizeof(doc_id));
	fin.close();
	return doc_id;
}
EHR::~EHR() {
	// TODO Auto-generated destructor stub
}

