/*
 * Call.cpp
 *
 *  Created on: May 12, 2023
 *      Author: safi
 */

#include "Call.h"
Call::Call(int i,char pat[],char doc[],char pr[],char dr[],bool aud,bool rec) {
	this->call_id=i;
	strcpy(this->patient_not,pat);
	strcpy(this->notes_doc,doc);
	strcpy(this->pat_res,pr);
	strcpy(this->res_doc,dr);
	this->audio_vid=aud;
	this->call_rec=rec;
}
void Call::Make_CalltoD(char name[],int id)
{
	this->call_id++;
	cout<<"\nHello!Your Doctor "<<name<<" here\n";
	cout<<"\nHope you have a healthy life!how can i assist you:";
	cin.getline(this->pat_res,50);
	cout<<"\nTake regular medicine and it would be good if you visit me!\nCall Ended Successfully:";
	char choice;
	cout<<"\nDo you want to make notes on this call:";
	cin>>choice;
	while(choice!='Y' && choice!='y' && choice!='N' && choice!='n')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='y'||choice=='Y')
	{
		cout<<"\nEnter your notes:";
		cin.getline(this->patient_not,300);
	}
	cout<<"\nDo you want to save this call:";
	cin>>choice;
	while(choice!='Y' && choice!='y' && choice!='N' && choice!='n')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='y'||choice=='Y')
	{
		savecall("/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient"+to_string(id+1)+"/CALL/CALL"+to_string(D.getDoctorId()+1)+".dat");
	}
}
void Call::Make_CalltoP(char name[],int idD,int idP)
{
	this->call_id++;
	cout<<"\nHello!Your Patient "<<name<<" here\n";
	cout<<"\nHope you are fine!how have you called me:";
	cin.getline(this->pat_res,50);
	cout<<"\nI will try to acknowledge your sayings !thanks for calling me!\nCall Ended Successfully:";
	char choice;
	cout<<"\nDo you want to make notes on this call:";
	cin>>choice;
	while(choice!='Y' && choice!='y' && choice!='N' && choice!='n')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='y'||choice=='Y')
	{
		cout<<"\nEnter your notes:";
		cin.getline(this->patient_not,300);
	}
	cout<<"\nDo you want to save this call:";
	cin>>choice;dp
	while(choice!='Y' && choice!='y' && choice!='N' && choice!='n')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='y'||choice=='Y')
	{
		savecall("/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient"+to_string(Idp)+"/CALL/CALL"+to_string(id+1)+".dat");
	}
}
void Call::DisplaycalltoP()
{
	if(this->call_rec==1)
	{
		cout<<"\nCall Id:"<<this->call_id<<endl;
		if(this->audio_vid==1)
		{
			cout<<"\nVideo Call\n";
		}
		else
		{
			cout<<"\nAudio Call\n";
			cout<<"\nPatient Notes:"<<this->patient_not<<endl;

		}
	}
	else
	{
		cout<<"\nOOPs!you have'nt recorded the call\n";
		cout<<"\nPress any key to continue:";
		getch();
	}
}
void Call::DisplaycalltoD()
{
	if(this->call_rec==1)
	{
		cout<<"\nCall Id:"<<this->call_id<<endl;
		if(this->audio_vid==1)
		{
			cout<<"\nVideo Call\n";
		}
		else
		{
			cout<<"\nAudio Call\n";
			cout<<"\nDoctor Notes:"<<this->notes_doc<<endl;

		}
	}
	else
	{
		cout<<"\nOOPs!you have'nt recorded the call\n";
		cout<<"\nPress any key to continue:";
		getch();
	}
}
void Call::savecall(string path)
{
	ofstream fout;
	fout.open(path,ios::binary|ios::app);
	if(!fout.is_open())
	{
		cout<<"\nFile not found!Program aborted:";
		exit(-1);
	}
	fout.write(reinterpret_cast<char *> (this),sizeof(this));
	fout.close();
}
void Call::retrievecall(string path,bool check,bool person)	//0 check only last,0 person patient.
{
	ifstream fin;
	fin.open(path,ios::binary);
	if(!fin.is_open())
	{
		cout<<"\nFile not found!Program aborted:";
		exit(-1);
	}
	while(fin.read((char *)(this),sizeof(this)))
	{
		if(check==1)
		{
			if(person==1)
				this->DisplaycalltoD();
			else
				this->DisplaycalltoP();
		}
	}
}
Call::~Call() {
	// TODO Auto-generated destructor stub
}

