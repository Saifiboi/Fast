//============================================================================
// Name        : Project.cpp
// Author      : Saif Ur Rehman
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <fstream>
#include <string>
#include<cstdlib>
//#include "Patient.h"
#include "Patient.h"
#include "Doctor.h"
#include "EHR.h"
#include "IOT.h"
void PatientPortal(Patient *P,Doctor * D);
void DoctorPortal(Patient *P,Doctor * D);
void writepatient(Patient *P,int size);
Patient *readpatient();
void writeDoctor(Doctor *D,int size);
Doctor * readDoctor();
void writeEHR(string,int);
void writeIOT(IOT & I,string path);
void readIOT(IOT & I,string path);
void callIOTwrite(int index);
void seeEHRtoD(Patient *P,Doctor &D);
void assignDoctors(Patient *P,Doctor *D2);
void EditEHR(Patient *P,Doctor &D);
void seeIOTtoD(Patient *P,Doctor &D);
void Mngeappointreq(Patient *P,Doctor &D);
char getch(void);
int main() {
	srand(time(0));
	char contin='Y';
	Doctor *D2=readDoctor();
	Patient *P1;
	while(contin=='Y' || contin=='y')
	{
		P1=readpatient();
		cout<<P1[0].getPassword()<<endl;
		cout<<P1[1].getPassword()<<endl;
		assignDoctors(P1,D2);
		string path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
		EHR temp;
		for(int i=0;i<10;i++)
		{
			cout<<i<<endl;
				path=path+to_string(i+1)+"/EHR/EHR";
				cout<<P1[i].getIndexdoctor()<<endl;
				for(int j=0;j<P1[i].getIndexdoctor();j++)
				{
					path=path+to_string(j+1)+".dat";
					cout<<path;
					readEHR(temp,path);
					P1[i].getEHR(j)=temp;
					cout<<P1[i].getEHR(j).getAllergies()<<endl;
					path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
					path=path+to_string(i+1)+"/EHR/EHR";
				}
				path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
			}
		IOT I;
		for(int i=0;i<10;i++)
		{
			path=path+to_string(i+1)+"/IOT.dat";
			readIOT(I,path);
			P1[i].getIOT()=I;
			P1[i].getIOT().Dispaly();
			path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
		}
		int choice_usr;
		cout<<"\nWelcome to RMC System.....\n";
		cout<<"\nEnter Your choice: \n1.Patient\n2.Doctor\n";
		cin>>choice_usr;
		while(choice_usr<1 && choice_usr>2)
		{
			cout<<"\nInvalid Input!try again:";
					cin>>choice_usr;
		}
		switch(choice_usr)
		{
		case 1:
			PatientPortal(P1,D2);
			writepatient(P1,10);
			writeDoctor(D2,5);
			break;
		case 2:
	//		Doctorportal();
			break;
		}
		cout<<"\nWelcome Back to RMC portal...\nDo you wnat to continue?(Y/N):";
		cin>>contin;
		while(contin!='Y' && contin!='y' && contin!='N' && contin!='n')
		{
			cout<<"\nInvalid Character !Enter Again:";
			cin>>contin;
		}
	}

//	for(int i=0;i<10;i++)
//	{
//		for(int j=0;j<90;j++)
//		{
//			callIOTwrite(i);
//		}
//	}
//
//	for(int i=0;i<10;i++)
//	{
//	P1[0].setIndexdoctor(4);
	//EHR E;
//	for(int j=0;j<P1[0].getIndexdoctor();j++)
//	{
//		readEHR(E,"/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient1/EHR/EHR1.dat");
////		P1[0].setDoctor(D2[k], j);
//	}

	//}
//	cout<<P1[0].getPatientName()<<endl;
//	cout<<P1[0].getIndexdoctor()<<endl;
//	cout<<P1[0].getD(0).getDoctorId();
//	cout<<P1[0].getD(0).getDoctorId()<<"\t"<<P1[0].getD(0).getName()<<endl;
//	string patref="Patient\0";
//	string path;
//	int Docid;
//	for(int i=1;i<10;i++)
//	{
//		patref=patref+to_string(i+1);
//		path="/home/safi/Documents/Semester2/OOP/Project/Cloud/"+patref;
//		for(int j=0;j<P1[i].getIndexdoctor();j++)
//		{
//			path=path+"/EHR/"+"EHR"+to_string(j+1)+".dat";
//			writeEHR(path,P1[i].getD(j).getDoctorId());
//			path="/home/safi/Documents/Semester2/OOP/Project/Cloud/"+patref;
//		}
//		patref="Patient\0";
//	}
//	readEHR("/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient1/EHR/EHR1.dat");
//	if(D2!=0)
//	{
//		delete  [] D2;
//	}
//	if(P1!=0)
//	{
//		delete[] P1;
//	}
}
void writepatient(Patient *P,int size)
{
	ofstream fout;
	fout.open("/home/safi/Documents/Semester2/OOP/Project/objectlists/Patientlist.dat",ios::binary);
	for(int i=0;i<size;i++)
	{
		fout.write(reinterpret_cast<char *>(&P[i]),sizeof(P[i]));
	}
	fout.close();
}
Patient* readpatient()
{
	ifstream fin;
	Patient * P=NULL;
	fin.open("/home/safi/Documents/Semester2/OOP/Project/objectlists/Patientlist.dat",ios::binary);
	if(fin.is_open())
	{
		P = new Patient[10];
		int i=0;
		while(fin.read((char *)(&P[i]),sizeof(P[i])))
		{

			cout<<P[i].getIndexdoctor()<<endl;
//			P[i].readEHRs();
//			cout<<P[i].getEHR(0).getConsultation()<<endl;
			i++;
		}

	}
	fin.close();
	return P;

}
void writeDoctor(Doctor *D,int size)
{
	ofstream fout;
	fout.open("/home/safi/Documents/Semester2/OOP/Project/objectlists/Doctorlist.dat",ios::binary);
	for(int i=0;i<size;i++)
	{
		fout.write(reinterpret_cast<char *>(&D[i]),sizeof(D[i]));
	}
	fout.close();
}
Doctor  * readDoctor ()
{
	ifstream fin;
	Doctor *D=NULL;
	fin.open("/home/safi/Documents/Semester2/OOP/Project/objectlists/Doctorlist.dat",ios::binary);
	if(fin.is_open())
	{

		D=new Doctor[5];
		int i=0;
		while(fin.read((char *)(&D[i]),sizeof(D[i])))
		{
			i++;
		}
	}
	fin.close();
	return D;

}
void writeEHR(string path,int doc_id)
{
	cout<<path<<endl;
	cout<<"here in write";
	EHR E;
	string input;
	cout<<"\nEnter consultation:";
	getline(cin,input);
	E.setConsultation(&input[0]);
	cout<<"\nEnter prescribtions:";
	getline(cin,input);
	E.setPrescribtions(&input[0]);
	cout<<"\nEnter recommendations:";
	getline(cin,input);
	E.setRecommendations(&input[0]);
	cout<<"\nEnter dietry_restriction:";
	getline(cin,input);
	E.setDietryRestriction(&input[0]);
	cout<<"\nEnter allergies:";
	getline(cin,input);
	E.setAllergies(&input[0]);
	cout<<"\nEnter regular_medication";
	getline(cin,input);
	E.setRegularMedication(&input[0]);
	cout<<"\nEnter chronic_health_condition:";
	getline(cin,input);
	E.setChronicHealthCondition(&input[0]);
	for(int i=0;i<4;i++)
	{
		cout<<"\nEnter time of Appointment "<<i<<":";
		getline(cin,input);
		E.setAppointments(&input[0],i);
	}
//	char input[255];
//	strcpy(input,"Patient has a sore throat and fever.");
//	E.setConsultation(input);
//	strcpy(input,"Penicillin, 500mg, take 3 times a day for 10 days.");
//	E.setPrescribtions(input);
//	strcpy(input,"Drink plenty of fluids and get plenty of rest.");
//	E.setRecommendations(input);
//	strcpy(input,"No solid food for the next 24 hours. Only drink clear liquids.");
//	E.setDietryRestriction(input);
//	strcpy(input,"Patient is allergic to penicillin.");
//	E.setAllergies(input);
//	strcpy(input,"Patient takes 100mg of aspirin every morning.");
//	E.setRegularMedication(input);
//	strcpy(input,"Patient has high blood pressure.");
//	E.setChronicHealthCondition(input);
//
//	// Set appointment times
//	strcpy(input,"9:00am on May 10th");
//	E.setAppointments(input, 0);
//	strcpy(input,"2:30pm on May 12th");
//	E.setAppointments(input, 1);
//	strcpy(input,"11:15am on May 14th");
//	E.setAppointments(input, 2);
//	strcpy(input,"3:00pm on May 16th");
//	E.setAppointments(input, 3);
	ofstream fout;
	fout.open(path,ios::binary);
	fout.write(reinterpret_cast<char *>(&E),sizeof(E));
	fout.write(reinterpret_cast<char *>(&doc_id),sizeof(doc_id));
	fout.close();



}
void callIOTwrite(int index)
{
	string path= "/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
			path=path+to_string(index+1) + "/IOT.dat";
			cout<<path<<endl;
	IOT I;
	I.update();
	writeIOT(I,path);
}
void writeIOT(IOT & I,string path)
{
	ofstream fout;
	fout.open(path,ios::binary|ios::app);
	fout.write(reinterpret_cast<char *>(&I), sizeof(I));
	fout.close();
}
void readIOT(IOT & I,string path)
{
	ifstream fin;
	fin.open(path,ios::binary);
	while(!fin.eof())
		fin.read((char *)(&I),sizeof(I));
	fin.close();
}
void assignDoctors(Patient *P,Doctor *D2)
{
	for(int i=0;i<10;i++)
		{
			for(int j=0;j<P[i].getIndexdoctor();j++)
			{
				for(int k=0;k<5;k++)
				{
					if(P[i].getDocIds(j)==D2[k].getDoctorId())
					{
						P[i].setDoctor(D2[k],j);
					}
				}
			}
		}

}
void PatientPortal(Patient *P,Doctor * D)
{
	int id,usr_choice;
	char check;
	bool doc_full=0;
	char password[20];
	bool i=1;
	cout<<"\nWElcome to login portal...";
	while(i)
	{
		cout<<"\nEnter Your Login Id:";
		cin>>id;
		while(id<1 ||id>10)
		{
			cout<<"\nInvalid Id!Type again:";
			cin>>id;
		}
		cout<<"\nConfirmation required Patient ID:"<<id<<"\nEnter your choice(Y/N):";
		cin>>check;
		if(check=='Y'|| check=='y')
		{
			i=0;
		}
	}
	cin.ignore();
	cout<<"\nEnter Your Password:";
	cin.getline(password, 20);
	cout<<password<<endl;
	cout<<P[id-1].getPassword()<<endl;
	cout<<strcmp(P[id-1].getPassword(),password)<<endl;
	for(int i=0;(i<=3&&strcmp(P[id-1].getPassword(),password)!=0);i++)
	{
		if(i==3)
		{
			cout<<"\nBreach Error !Program Aborted:\n";
			exit(-1);
		}
		cout<<"\nInvalid Password!Type Again:";
		cin.getline(password, 20);
	}
	cout<<"\nWELCOME TO PATIENT PORTAL....\n";
	cout<<"\n1.See EHR";
	cout<<"\n2.See IOT";
	if(P[id-1].getIndexdoctor()==5)
	{
		cout<<"\n3.Add Appointment.";
		cout<<"\n4.Exit\n";
		doc_full=1;
	}
	else
	{
		cout<<"\n3.Add Doctor.";
		cout<<"\n4.Add Appointment.";
		cout<<"\n5.Exit\n";
	}
	cin>>usr_choice;
	int limit=5;
	if(doc_full==1)
	{
		limit=4;
	}
	while(usr_choice<1 ||usr_choice>limit)
	{
		cout<<"\nInvalid Input!Try Again:";
		cin>>usr_choice;
	}
	if(doc_full==1 && usr_choice>=3)
	{
			usr_choice++;
	}
	int doctor_choose;
	switch(usr_choice)
	{
	case 1:
		cout<<"\nYou Have\n";
		for(int i=0;i<P[id-1].getIndexdoctor();i++)
		{
			cout<<i+1<<"."<<P[id-1].getD(i).getName()<<endl;
		}
		cout<<"\nEnter Your Choice of Doctor for EHR:";
		cin>>doctor_choose;
		while(doctor_choose<1 || doctor_choose>P[id-1].getIndexdoctor())
		{
			cout<<"\nInvalid Input!Try Again:";
			cin>>doctor_choose;
		}
		P[id-1].printpatient();
		P[id-1].getEHR(doctor_choose-1).Display();
		break;
	case 2:
		P[id-1].printpatient();
		P[id-1].getIOT().Dispaly();
		break;
	case 3:
		if(doc_full==0)
		{
			int *arr;
			arr=new int [5-(P[id-1].getIndexdoctor())];
			cout<<"\nAvaliable Doctors are\n";
			int i=1;
			bool check2=1;
			for(int j=0;j<5;j++)
			{
				check2=1;
				for(int k=0;k<P[id-1].getIndexdoctor();k++)
				{
					if(D[j].getDoctorId()==P[id-1].getDocIds(k))
					{
						check2=0;
					}
				}
				if(check2==1)
				{
					cout<<i<<"."<<D[j].getName()<<"\t"<<D[j].getDegree()<<endl;
					arr[i-1]=D[j].getDoctorId();
					i++;
				}
			}
			cout<<"Enter Your Choice:";
			cin>>doctor_choose;
			while(doctor_choose<1 || doctor_choose>(i-1))
			{
				cout<<"\nInvalid Input!Try Again:";
				cin>>doctor_choose;
			}
			P[id-1].setIndexdoctor(P[id-1].getIndexdoctor()+1);
			P[id-1].setDocIds(arr[doctor_choose-1], P[id-1].getIndexdoctor()-1);
			P[id-1].setDoctor(D[arr[doctor_choose-1]-1], P[id-1].getIndexdoctor()-1);
			cout<<P[id-1].getDocIds(P[id-1].getIndexdoctor()-1);
			cout<<"\nDoctor Added Successfully....\n";
			delete []arr;
			arr=0;
		}
		break;
	case 4:
		char App_time[50];
		int app_choice;
		cout<<"\nYou Have following Doctors\n";
		for(int i=0;i<P[id-1].getIndexdoctor();i++)
		{
			cout<<i+1<<P[id-1].getD(i).getName()<<"\t"<<P[id-1].getD(i).getDegree()<<endl;

		}
		cout<<"\nEnter Your Choice:";
		cin>>app_choice;
		while(app_choice<1 || app_choice>P[id-1].getIndexdoctor())
		{
			cout<<"\nInvalid Input!Type Again:";
			cin>>app_choice;
		}
		cout<<"\nEnter Date and Time:";
		cin.ignore();
		cin.getline(App_time, 50);
		P[id-1].getD(app_choice-1).addappointmentreq(id-1);
		P[id-1].getD(usr_choice-1).setapp_time(App_time, id-1);
		cout<<"\nAppointment Requested Successfully....\n";
		break;
	}
}
void DoctorPortal(Patient *P,Doctor * D)
{
	int oper_choice;
	char password[20];
	bool i=1;
	int id;
	char check;
	cout<<"\nWElcome to Doctor login portal...";
	while(i)
	{
		cout<<"\nEnter Your Login Id:";
		cin>>id;
		while(id<1 ||id>10)
		{
			cout<<"\nInvalid Id!Type again:";
			cin>>id;
		}
		cout<<"\nConfirmation required Patient ID:"<<id<<"\nEnter your choice(Y/N):";
		cin>>check;
		if(check=='Y'|| check=='y')
		{
			i=0;
		}
	}
	cin.ignore();
	cout<<"\nEnter Your Password:";
	cin.getline(password, 20);
	cout<<password<<endl;
	for(int i=0;i<3&& strcmp(D[id-1].getPassword(),password)!=0;i++)
	{
		if(i==3)
		{
			cout<<"\nBreach Error !Program Aborted:\n";
			exit(-1);
		}
		cout<<"\nInvalid Password!Type Again:";
		cin.getline(password, 20);
	}
	cout<<"\nWelcome to Doctor Portal....\n";
	char contin='Y';
	while(contin=='Y'||contin=='y')
	{
		cout<<"Enter an operation:\n";
		cout<<"1.See EHR of patient.";
		cout<<"\n2.Update EHR of patient.";
		cout<<"\n3.See IOT of patient.";
		cout<<"\n4.Manage Appointment Request.\n";
		cin>>oper_choice;
		while(oper_choice<1 || oper_choice>4)
		{
			cout<<"\nInvalid Choice Type Again:";
			cin>>oper_choice;
		}
		switch(oper_choice)
		{
		case 1:
			seeEHRtoD(P,D[id-1]);
			break;
		case 2:
			EditEHR(P,D[id-1]);
			break;
		case 3:
			seeIOTtoD(P,D[id-1]);
			break;
		case 4:
			Mngeappointreq(P,D[id-1]);
			break;
		}
		cout<<"\nWelcome back to Doctor Portal:\nDo you want to continue(Y/N):";
		cin>>contin;
		while(contin!='N' && contin!='n' && contin!='Y' && contin!='y')
		{
			cout<<"\nInvalid Input!Try Again:";
			cin>>contin;
		}
	}
}
void seeEHRtoD(Patient *P,Doctor &D)
{
	int *arr;
	int *indexdoc;
	int size=0;
	int usr_choice;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(D.getDoctorId()==P[i].getDocIds(j))
			{
				size++;
			}
		}
	}
	arr=new int [size];
	indexdoc=new int [size];
	int k=0;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(D.getDoctorId()==P[i].getDocIds(j))
			{
				arr[k]=i;
				indexdoc[k]=j;
				k++;
			}
		}
	}
	cout<<"\nYou Have Following Patients.\n";
	for(int i=0;i<size;i++)
	{
		cout<<i+1<<"...........\n";
		P[arr[i]].printpatient();
	}
	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
	cin>>usr_choice;
	while(usr_choice<1 || usr_choice>size)
	{
		cout<<"\nInvalid Input!Try Again:";
		cin>>usr_choice;
	}
	P[arr[usr_choice-1]].printpatient();
	P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).Display();
	cout<<"\nFile Displayed successfully!Press any key to continue:";
	getch();

}
void EditEHR(Patient *P,Doctor &D)
{
	int *arr;
	int *indexdoc;
	int size=0;
	int usr_choice;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(D.getDoctorId()==P[i].getDocIds(j))
			{
				size++;
			}
		}
	}
	arr=new int [size];
	indexdoc=new int [size];
	int k=0;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(D.getDoctorId()==P[i].getDocIds(j))
			{
				arr[k]=i;
				indexdoc[k]=j;
				k++;
			}
		}
	}
	cout<<"\nYou Have Following Patients.\n";
	for(int i=0;i<size;i++)
	{
		cout<<i+1<<"...........\n";
		P[arr[i]].printpatient();
	}
	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
	cin>>usr_choice;
	while(usr_choice<1 || usr_choice>size)
	{
		cout<<"\nInvalid Input!Try Again:";
		cin>>usr_choice;
	}
	if(P[arr[usr_choice-1]].getpermission(indexdoc[usr_choice-1])==1)
	{
		int choiceedit;
		char input[60];
		char editmore='Y';
		while(editmore=='Y'||editmore=='y')
		{
			cout<<"\nYou can change the following things..\n";
			cout<<"1.Consultation."<<endl;
			cout<<"2.Prescribtion."<<endl;
			cout<<"3.Allergy condition."<<endl;
			cout<<"4.Recommendations."<<endl;
			cout<<"5.dietry_restriction"<<endl;
			cout<<"6.regular_medication"<<endl;
			cout<<"7.charchronic_health_condition"<<endl;
			cout<<"\nEnter Your Choice:";
			cin>>choiceedit;
			while(choiceedit<1 || choiceedit>7)
			{
				cout<<"\nInvalid Input:Try Again:";
				cin>>choiceedit;
			}
			cout<<"\nEnter your input for Editing:";
			cin.ignore();
			cin.getline(input, 60);
			switch(choiceedit)
			{
			case 1:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setConsultation(input);
				break;
			case 2:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setPrescribtions(input);
				break;
			case 3:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setAllergies(input);
				break;
			case 4:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setRecommendations(input);
				break;
			case 5:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setDietryRestriction(input);
				break;
			case 6:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setRegularMedication(input);
				break;
			case 7:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setChronicHealthCondition(input);
				break;
			}
			cout<<"\nValue Edited Successfully!\n";
			cout<<"Do you want to continue editing EHR(Y/N):";
			cin>>editmore;
			while(editmore!='n' && editmore!='N' && editmore!='Y' && editmore!='y')
			{
				cout<<"\nInvalid Character !Enter Again:";
				cin>>editmore;
			}
		}
	}
	else
	{
		cout<<"\nSorry!You are not permitted to make changes in this EHR!press any key to exit:";
		getch();

	}
}
char getch(void)				//function to take input a single character.
{
 // Set terminal to raw mode
  system("stty raw");

  // Wait for single character
  char input = getchar();
  // Reset terminal to normal "cooked" mode
  system("stty cooked");
  return input;
}
void seeIOTtoD(Patient *P,Doctor &D)
{
	int *arr;
	int *indexdoc;
	int size=0;
	int usr_choice;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(D.getDoctorId()==P[i].getDocIds(j))
			{
				size++;
			}
		}
	}
	arr=new int [size];
	indexdoc=new int [size];
	int k=0;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(D.getDoctorId()==P[i].getDocIds(j))
			{
				arr[k]=i;
				indexdoc[k]=j;
				k++;
			}
		}
	}
	cout<<"\nYou Have Following Patients.\n";
	for(int i=0;i<size;i++)
	{
		cout<<i+1<<"...........\n";
		P[arr[i]].printpatient();
	}
	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
	cin>>usr_choice;
	while(usr_choice<1 || usr_choice>size)
	{
		cout<<"\nInvalid Input!Try Again:";
		cin>>usr_choice;
	}
	P[arr[usr_choice-1]].printpatient();
	P[arr[usr_choice-1]].getIOT().Dispaly();
	cout<<"\nFile Displayed successfully!Press any key to continue:";
	getch();
}
void Mngeappointreq(Patient *P,Doctor &D)
{
	bool check=0;
	int size=0;
	for(int i=0;i<10;i++)
	{
		if(D.getappointmentreq(i)==-1)
		{
			check=1;
			size++;
		}
	}
	if(check==1)
	{
		int *arr=new int [size];
		int doc_choice;
		int j=0;
		for(int i=0;i<10;i++)
		{
			if(D.getappointmentreq(i)==-1)
			{
				arr[j]=i;
				j++;
			}
		}
		cout<<"\nYou Have following requests:\n";
		for(int i=0;i<size;i++)
		{
			cout<<i+1<<"....\n";
			P[arr[i]].printpatient();
			cout<<"Time:"<<D.getapp_time(arr[i]);
		}
		cout<<"\nEnter Your Choice For approval:";
		cin>>doc_choice;
		while(doc_choice<1 || doc_choice>size)
		{
			cout<<"\nInvalid Input!Try Again:";
			cin>>doc_choice;
		}
		int doc_index=0;
		for(int i=0;i<P[arr[doc_choice-1]].getIndexdoctor();i++)
		{
			if(P[arr[doc_choice-1]].getDocIds(i)==D.getDoctorId())
			{
				doc_index=i;
			}
		}
		for(int i=0;i<3;i++)
		{
			P[arr[doc_choice-1]].getEHR(doc_index).setAppointments((P[arr[doc_choice-1]].getEHR(doc_index).getAppointments(i+1)),i);
		}
		P[arr[doc_choice-1]].getEHR(doc_index).setAppointments(D.getapp_time(arr[doc_choice-1]),4);
		cout<<"\nAppointment Added Successfully....\nPress any key to exit";
		getch();
	}
	else
	{
		cout<<"\nOOPS!You don't have any Appointment request!Press any key to exit!";
		getch();
	}
}
