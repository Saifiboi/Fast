/*
 * Call.cpp
 *
 *  Created on: May 12, 2023
 *      Author: safi
 */

#include "Call.h"
Call::Call(int i,char pat[],char doc[],char pr[],char dr[],bool aud,bool rec) {
	this->call_id=0;
	strcpy(this->patient_not,pat);
	strcpy(this->notes_doc,doc);
	strcpy(this->pat_res,pr);
	strcpy(this->res_doc,dr);
	this->audio_vid=aud;
	this->call_rec=rec;
}
void Call::Make_CalltoD(const char name[],int pid,int did)
{
	this->call_id++;
	cout<<"\nAudio or video:(0/1):";
	int i;
	cin>>i;
	while(i<0 ||i>1)
	{
		cout<<"\nInvalid Input!TTry Again:";
		cin>>i;
	}
	this->audio_vid=i;
	cout<<"\nCalling....";
	cout<<"\nHello!Your Doctor "<<name<<" here\n";
	cout<<"\nHope you have a healthy life!how can i assist you:";
	cin.ignore();
	cin.getline(this->pat_res,50);
	cout<<"\nTake regular medicine and it would be good if you visit me!";
	char choice;
	cout<<"\nDo you want to make notes on this call:";
	cin>>choice;
	while(choice!='Y' && choice!='y' && choice!='N' && choice!='n')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='y'||choice=='Y')
	{
		cout<<"\nEnter your notes:";
		cin.ignore();
		cin.getline(this->patient_not,300);
	}
	cout<<"\nCall Ended Successfully:\n";
	cout<<"\nDo you want to save this call:";
	cin>>choice;
	while(choice!='Y' && choice!='y' && choice!='N' && choice!='n')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='y'||choice=='Y')
	{
		this->call_rec=1;
		cout<<"\nCall Saved Successfully!Press any key to exit from call menu!:";
		cin.ignore();
		getch();
	}
	savecall("/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient"+to_string(pid)+"/CALL/CALL"+to_string(did)+".dat");
	this->decryptcall();
}
void Call::Make_CalltoP(const char name[],int did,int pid)
{
	this->call_id++;
	cout<<"\nAudio or video:(0/1):";
	int i;
	cin>>i;
	while(i<0 ||i>1)
	{
		cout<<"\nInvalid Input!TTry Again:";
		cin>>i;
	}
	this->audio_vid=i;
	cout<<"\nCalling....";
	cout<<"\nHello!Your Patient "<<name<<" here\n";
	cout<<"\nHope you are fine!how have you called me:";
	cin.ignore();
	cin.getline(this->res_doc,50);
	cout<<"\nI will try to acknowledge your sayings !thanks for calling me!";
	char choice;
	cout<<"\nDo you want to make notes on this call:";
	cin>>choice;
	while(choice!='Y' && choice!='y' && choice!='N' && choice!='n')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='y'||choice=='Y')
	{
		cout<<"\nEnter your notes:";
		cin.ignore();
		cin.getline(this->patient_not,300);
	}
	cout<<"\nCall Ended Successfully!";
	cout<<"\nDo you want to save this call:";
	cin>>choice;
	while(choice!='Y' && choice!='y' && choice!='N' && choice!='n')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='y'||choice=='Y')
	{
		this->call_rec=1;
		cout<<"\nCall Saved Successfully!Press any key to exit from call menu!:";
		cin.ignore();
		getch();
	}
	savecall("/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient"+to_string(pid)+"/CALL/CALL"+to_string(did)+".dat");
	this->decryptcall();
}
void Call::DisplaycalltoP()
{
	if(this->call_rec==1)
	{
		cout<<"\nCall Id:"<<this->call_id<<endl;
		if(this->audio_vid==1)
		{
			cout<<"\nVideo Call\n";
		}
		else
		{
			cout<<"\nAudio Call\n";
		}
		cout<<"\nPatient Notes:"<<this->patient_not<<endl;
		cout<<"\nPatient response:"<<this->pat_res<<endl;
		cout<<"\nDoctor response:"<<this->res_doc<<endl;
	}
	else
	{
		cout<<"\nOOPs!you have'nt recorded the call\n";
		cout<<"\nPress any key to continue:";
		getch();
	}
}
const char * Call::getdocres()
{
	return this->res_doc;
}
const char * Call::getpatres()
{
	return this->pat_res;
}
void Call::DisplaycalltoD()
{
	if(this->call_rec==1)
	{
		cout<<"\nCall Id:"<<this->call_id<<endl;
		if(this->audio_vid==1)
		{
			cout<<"\nVideo Call\n";
		}
		else
		{
			cout<<"\nAudio Call\n";
		}\
		cout<<"\nDoctor Notes:"<<this->notes_doc<<endl;
		cout<<"\nPatient response:"<<this->pat_res<<endl;
		cout<<"\nDoctor response:"<<this->res_doc<<endl;
	}
	else
	{
		cout<<"\nOOPs!you have'nt recorded the call\n";
		cout<<"\nPress any key to continue:";
		getch();
	}
}
void Call::savecall(string path)
{
	ofstream fout;
	fout.open(path,ios::binary|ios::app);
	if(!fout.is_open())
	{
		cout<<"\nFile not found!Program aborted:";
		exit(-1);
	}
	this->encryptcall();
	fout.write(reinterpret_cast<char *>(&(*this)),sizeof(*this));
	fout.close();
}
void Call::retrievecall(string path,bool check,bool person)	//0 check only last,0 person patient.
{
	ifstream fin;
	fin.open(path,ios::binary);
	if(!fin.is_open())
	{
		cout<<"\nCall log does not exist with that person does not exist:";
		cout<<"\nPress any key to exit:";
		getch();
		return;
		exit(-1);
	}
	Call temp;
	while(fin.read((char *)(&(*this)),sizeof(*this)))
	{
		this->decryptcall();
		if(check==1)
		{
			temp=(*this);
			if(this->call_rec==1)
			{
				if(person==1)
					this->DisplaycalltoD();
				else
					this->DisplaycalltoP();
			}
		}
	}
	if(check==0)
	{
		if(person==1)
			temp.DisplaycalltoD();
		else
			temp.DisplaycalltoP();
	}
}
void Call::operator =(Call& C)
{
	this->call_id=C.call_id;
	this->audio_vid=C.audio_vid;
	this->call_rec=C.call_rec;
	strcpy(this->notes_doc,C.notes_doc);
	strcpy(this->pat_res,C.pat_res);
	strcpy(this->patient_not,C.patient_not);
	strcpy(this->res_doc,C.res_doc);

}
void Call::encryptcall()
{
	this->call_id<<=2;
	int j=0;
	while(this->notes_doc[j]!='\0')
	{
		this->notes_doc[j]+=10;
		j++;
	}
	j=0;
	while(this->patient_not[j]!='\0')
	{
		this->patient_not[j]+=10;
		j++;
	}
	j=0;
	while(this->pat_res[j]!='\0')
	{
		this->pat_res[j]+=10;
		j++;
	}
	j=0;
	while(this->res_doc[j]!='\0')
	{
		this->res_doc[j]+=10;
		j++;
	}
}
void Call::decryptcall()
{
	this->call_id>>=2;
	int j=0;
	while(this->notes_doc[j]!='\0')
	{
		this->notes_doc[j]-=10;
		j++;
	}
	j=0;
	while(this->patient_not[j]!='\0')
	{
		this->patient_not[j]-=10;
		j++;
	}
	j=0;
	while(this->pat_res[j]!='\0')
	{
		this->pat_res[j]-=10;
		j++;
	}
	j=0;
	while(this->res_doc[j]!='\0')
	{
		this->res_doc[j]-=10;
		j++;
	}
}
void Call::takecallbyP()
{
	cout<<"\nEnter Your response:";
	cin.getline(this->pat_res,200);
	char choice;
	cout<<"\nDo you want to take notes:(Y/N)";
	cin>>choice;
	while(choice!='n' && choice!='N' && choice !='Y' && choice !='y')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='Y' || choice=='y')
	{
		cout<<"\nEnter Notes:";
		cin.ignore();
		cin.getline(this->patient_not,200);
	}
	cout<<"\nCall Ended Successfully!Enter any key to continue\n";
	cin.ignore();
	getch();

}
void Call::takecallbyD()
{
	cout<<"\nEnter Your response:";
	cin.getline(this->res_doc,200);
	char choice;
	cout<<"\nDo you want to take notes:(Y/N)";
	cin>>choice;
	while(choice!='n' && choice!='N' && choice !='Y' && choice !='y')
	{
		cout<<"\nInvalid Character !Enter Again:";
		cin>>choice;
	}
	if(choice=='Y' || choice=='y')
	{
		cout<<"\nEnter Notes:";
		cin.ignore();
		cin.getline(this->notes_doc,200);
	}
	cout<<"\nCall Ended Successfully!Enter any key to continue\n";
	cin.ignore();
	getch();
}
Call::~Call() {
	// TODO Auto-generated destructor stub
}

