/*
 * Doctor.cpp
 *
 *  Created on: May 2, 2023
 *      Author: safi
 */
//============================================================================
// Name        : Doctor.cpp
// Author      : Saif Ur Rehman
// ROLL NO     :i22-1697
//============================================================================
#include "Doctor.h"
//Constructor.
Doctor::Doctor(int id,char password [],char name[],int age,char deg[],char exp[]) {
	this->Doctor_id=id;
	strcpy(this->password,password);
	strcpy(this->name,name);
	this->age=age;
	strcpy(this->Experience,exp);
	strcpy(this->Degree,deg);
	for(int i=0;i<10;i++)
	{
		this->Ehrreq[i]=0;
		this->appointments[i]=0;
	}

}
//Getters and setters.
int Doctor::getAge() const {
	return age;
}

void Doctor::setAge(int age) {
	this->age = age;
}

const char * Doctor::getDegree() const {
	return this->Degree;
}

void Doctor::setDegree(char degree[]) {
	strcpy(this->Degree, degree);
}

int Doctor::getDoctorId() const {
	return Doctor_id;
}

void Doctor::setDoctorId(int doctorId) {
	Doctor_id = doctorId;
}
const char* Doctor::getExperience() const {
	return Experience;
}

void Doctor::setExperience(char experience[]) {
	strcpy(this->Experience, experience);
}

const char * Doctor::getName() const {
	return name;
}

void Doctor::setName(char name[]) {
	strcpy(this->name, name);
}

const char* Doctor::getPassword() const {
	return password;
}

void Doctor::setPassword(char password[]) {
	strcpy(this->password, password);
}
void Doctor::addappointmentreq(int index){
	if(index>=0 && index<10)
	{
		this->appointments[index]=-1;
	}
}
//acceptance issuance.
void Doctor::acceptappointment(int index)
{
	if(index>=0 && index<10)
	{
		this->appointments[index]=0;
	}
}
int Doctor::getappointmentreq(int index)
{
	return this->appointments[index];
}
void Doctor::setapp_time(char time[],int index)
{
	strcpy(this->app_time[index],time);
}
char *Doctor::getapp_time(int index)
{
	return this->app_time[index];
}
//Set a request.
void Doctor::setEhrreq(int index)
{
	if(index>=0 && index<10)
	{
		this->Ehrreq[index]=-1;
	}
}
//normalize request after writing EHR.
void Doctor::normalEhrreq(int index)
{
	if(index>=0 && index<10)
	{
		this->Ehrreq[index]=0;
	}
}
int Doctor::getEhrreq(int index)
{
	return this->Ehrreq[index];
}
void  Doctor::setcallin(int index)
{
	if(index>=0 && index<10)
	{
		this->callin[index]=-1;
	}
}
int Doctor::getcallin(int index)
{
	return this->callin[index];
}
void Doctor::normalcallin(int index)
{
	if(index>=0 && index<10)
	{
		this->callin[index]=0;
	}
}
Doctor::~Doctor() {
	// TODO Auto-generated destructor stub
}
char Doctor::Doctormenu(Patient *P)
{
	cout<<"\nWelcome to Doctor Portal....\n";
	string path;
	int cap_loc=0;
	for(int i=0;i<10;i++)			//Writing EHRs of newly aggregated patients.
	{
		if(this->getEhrreq(i)==-1)
		{
			cout<<"You have to write EHR file for:\n";
			P[i].printpatient();
			path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
			path=path+to_string(i+1)+"/EHR/EHR";
			for(int j=0;j<P[i].getIndexdoctor();j++)
			{
				if(P[i].getDocIds(j)==this->getDoctorId())
				{
					path=path+to_string(j+1)+".dat";
					cap_loc=j;
					break;
				}
			}
			P[i].getEHR(cap_loc).writeEHR(path,this->Doctor_id);
			P[i].getEHR(cap_loc).readEHR(path);
			this->normalEhrreq(i);
			cin.ignore();
			cout<<"\nFile wrote successfully!Press any key to continue:";
			getch();
		}
	}
	char contin='y';
	int oper_choice;
	cout<<"\nWelcome to Doctor Portal.....\n";
	cout<<"\nEnter an operation.";
	cout<<"\n1.See EHR of Patient.";
	cout<<"\n2.See IOT of Patient.";
	cout<<"\n3.Edit EHR of Patient.";
	cout<<"\n4.Manage Appiontments.";
	cout<<"\n5.Make a call to Patient.";
	cout<<"\n6.Change Password.";
	cout<<"\n7.Exit";
	cin>>oper_choice;
	while(oper_choice<1|| oper_choice>7)
	{
		cout<<"\nInvalid Input!Try Again:";
		cin>>oper_choice;
	}
	switch(oper_choice)
	{
	case 1:
		seeEHRtoD(P);
		break;
	case 2:
		seeIOTtoD(P);
		break;
	case 3:
		EditEHR(P);
		break;
	case 4:
		Mngeappointreq(P);
		break;
	case 5:
		MakeCall(P);
		break;
	case 6:
		cout<<"\nEnter New Password:";
		cin.getline(this->password,255);
		cout<<"\nPassword Changed Successfully!Press Any Key to Continue:";
		getch();
		break;
	case 7:
		contin='n';
		break;
	}
	return contin;
}
void Doctor::seeEHRtoD(Patient *P)
{
	int *arr;
	int *indexdoc;
	int size=0;
	int usr_choice;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)			//collecting desired Patients.
		{
			if(this->Doctor_id==P[i].getDocIds(j))
			{
				size++;
			}
		}
	}
	arr=new int [size];
	indexdoc=new int [size];
	int k=0;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(this->Doctor_id==P[i].getDocIds(j))
			{
				arr[k]=i;
				indexdoc[k]=j;
				k++;
			}
		}
	}
	cout<<"\nYou Have Following Patients.\n";		//Dispalying relevant patients.
	for(int i=0;i<size;i++)
	{
		cout<<i+1<<"...........\n";
		P[arr[i]].printpatient();
	}
	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
	cin>>usr_choice;
	while(usr_choice<1 || usr_choice>size)
	{
		cout<<"\nInvalid Input!Try Again:";
		cin>>usr_choice;
	}
	P[arr[usr_choice-1]].printpatient();				//Displaying EHR of a patient.
	P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).Display();
	cin.ignore();
	cout<<"\nFile Displayed successfully!Press any key to continue:";
	getch();
	delete [] arr;
	arr=0;
	delete [] indexdoc;
	indexdoc=0;

}
void Doctor::EditEHR(Patient *P)				//EDit EHR of Patient.
{
	int *arr;
	int *indexdoc;
	int size=0;
	int usr_choice;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(this->Doctor_id==P[i].getDocIds(j))
			{
				size++;
			}
		}
	}
	arr=new int [size];
	indexdoc=new int [size];
	int k=0;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(this->Doctor_id==P[i].getDocIds(j))
			{
				arr[k]=i;
				indexdoc[k]=j;
				k++;
			}
		}
	}
	cout<<"\nYou Have Following Patients.\n";			//Displaying relevant patients.
	for(int i=0;i<size;i++)
	{
		cout<<i+1<<"...........\n";
		P[arr[i]].printpatient();
	}
	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
	cin>>usr_choice;
	while(usr_choice<1 || usr_choice>size)
	{
		cout<<"\nInvalid Input!Try Again:";
		cin>>usr_choice;
	}
	if(P[arr[usr_choice-1]].getpermission(indexdoc[usr_choice-1])==1)				//checking for permission of editing.
	{
		int choiceedit;
		char input[60];
		char editmore='Y';
		while(editmore=='Y'||editmore=='y')
		{
			cout<<"\nYou can change the following things..\n";
			cout<<"1.Consultation."<<endl;
			cout<<"2.Prescribtion."<<endl;
			cout<<"3.Allergy condition."<<endl;
			cout<<"4.Recommendations."<<endl;
			cout<<"5.dietry_restriction"<<endl;
			cout<<"6.regular_medication"<<endl;
			cout<<"7.charchronic_health_condition"<<endl;
			cout<<"\nEnter Your Choice:";
			cin>>choiceedit;
			while(choiceedit<1 || choiceedit>7)
			{
				cout<<"\nInvalid Input:Try Again:";
				cin>>choiceedit;
			}
			cout<<"\nEnter your input for Editing:";
			cin.ignore();
			cin.getline(input, 60);
			switch(choiceedit)			//Editing specific value based on choice.
			{
			case 1:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setConsultation(input);
				break;
			case 2:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setPrescribtions(input);
				break;
			case 3:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setAllergies(input);
				break;
			case 4:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setRecommendations(input);
				break;
			case 5:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setDietryRestriction(input);
				break;
			case 6:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setRegularMedication(input);
				break;
			case 7:
				P[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1]).setChronicHealthCondition(input);
				break;
			}
			//storeEHR()[arr[usr_choice-1]].getEHR(indexdoc[usr_choice-1])
			cout<<"\nValue Edited Successfully!\n";
			cout<<"Do you want to continue editing EHR(Y/N):";
			cin>>editmore;
			while(editmore!='n' && editmore!='N' && editmore!='Y' && editmore!='y')
			{
				cout<<"\nInvalid Character !Enter Again:";
				cin>>editmore;
			}
		}
	}
	else
	{
		cin.ignore();
		cout<<"\nSorry!You are not permitted to make changes in this EHR!press any key to exit:";
		getch();

	}
	delete [] arr;
	arr=0;
	delete [] indexdoc;
	indexdoc=0;
}
void Doctor::seeIOTtoD(Patient *P)		//seeing IOT record of Patient.
{
	int *arr;
	int *indexdoc;
	int size=0;
	int usr_choice;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(this->Doctor_id==P[i].getDocIds(j))
			{
				size++;
			}
		}
	}
	arr=new int [size];
	indexdoc=new int [size];
	int k=0;
	for(int i=0;i<10;i++)
	{
		for(int j=0;j<P[i].getIndexdoctor();j++)
		{
			if(this->Doctor_id==P[i].getDocIds(j))
			{
				arr[k]=i;
				indexdoc[k]=j;
				k++;
			}
		}
	}
	cout<<"\nYou Have Following Patients.\n";
	for(int i=0;i<size;i++)
	{
		cout<<i+1<<"...........\n";
		P[arr[i]].printpatient();
	}
	cout<<"\nEnter The Number of Patient whose EHR you want to see.";
	cin>>usr_choice;
	while(usr_choice<1 || usr_choice>size)
	{
		cout<<"\nInvalid Input!Try Again:";
		cin>>usr_choice;
	}
	cin.ignore();
	int choice;
	P[arr[usr_choice-1]].printpatient();
	cout<<"\n1.Current or \n2.3 Months";
	cin>>choice;
	while(choice<1 || choice>2)
	{
		cout<<"\nInvalid Input!";
		cin>>choice;
	}
	if(choice==2)
	{
		string path="/home/safi/Documents/Semester2/OOP/Project/Cloud/Patient";
		path=path+to_string(arr[usr_choice-1]+1)+"/IOT.dat";
		P[arr[usr_choice-1]].getIOT().readIOT(path,1);
	}
	else
	{
		P[arr[usr_choice-1]].getIOT().Dispaly();
	}
	cout<<"\nFile Displayed successfully!Press any key to continue:";
	getch();
	delete [] arr;
	arr=0;
	delete [] indexdoc;
	indexdoc=0;
}
void Mngeappointreq(Patient *P,Doctor &D)		//Manages appointment requests of relevant patient.
{
	bool check=0;
	int size=0;
	for(int i=0;i<10;i++)
	{
		if(D.getappointmentreq(i)==-1)
		{
			check=1;
			size++;
		}
	}
	if(check==1)
	{
		int *arr=new int [size];
		int doc_choice;
		int j=0;
		for(int i=0;i<10;i++)
		{
			if(D.getappointmentreq(i)==-1)
			{
				arr[j]=i;
				j++;
			}
		}
		cout<<"\nYou Have following requests:\n";
		for(int i=0;i<size;i++)
		{
			cout<<i+1<<"....\n";
			P[arr[i]].printpatient();
			cout<<"Time:"<<D.getapp_time(arr[i]);
		}
		cout<<"\nEnter Your Choice For approval:";
		cin>>doc_choice;
		while(doc_choice<1 || doc_choice>size)
		{
			cout<<"\nInvalid Input!Try Again:";
			cin>>doc_choice;
		}
		int doc_index=0;
		for(int i=0;i<P[arr[doc_choice-1]].getIndexdoctor();i++)
		{
			if(P[arr[doc_choice-1]].getDocIds(i)==D.getDoctorId())
			{
				doc_index=i;
			}
		}
		for(int i=0;i<3;i++)
		{
			P[arr[doc_choice-1]].getEHR(doc_index).setAppointments((P[arr[doc_choice-1]].getEHR(doc_index).getAppointments(i+1)),i);
		}
		P[arr[doc_choice-1]].getEHR(doc_index).setAppointments(D.getapp_time(arr[doc_choice-1]),4);
		cin.ignore();
		cout<<"\nAppointment Added Successfully....\nPress any key to exit";
		getch();
	}
	else
	{
		cin.ignore();
		cout<<"\nOOPS!You don't have any Appointment request!Press any key to exit!";
		getch();
	}
}

